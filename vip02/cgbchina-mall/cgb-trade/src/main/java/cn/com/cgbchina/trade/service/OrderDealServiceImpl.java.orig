package cn.com.cgbchina.trade.service;

import cn.com.cgbchina.common.contants.Contants;
import cn.com.cgbchina.common.utils.*;
import cn.com.cgbchina.generator.IdGenarator;
import cn.com.cgbchina.item.model.GoodsModel;
import cn.com.cgbchina.item.model.ItemModel;
import cn.com.cgbchina.item.model.TblGoodsPaywayModel;
import cn.com.cgbchina.item.service.GoodsPayWayService;
import cn.com.cgbchina.item.service.GoodsService;
import cn.com.cgbchina.item.service.ItemService;
import cn.com.cgbchina.rest.visit.model.payment.ReturnPointsInfo;
import cn.com.cgbchina.rest.visit.model.payment.StagingRequest;
import cn.com.cgbchina.rest.visit.model.payment.StagingRequestResult;
import cn.com.cgbchina.rest.visit.service.payment.PaymentService;
import cn.com.cgbchina.rest.visit.service.payment.StagingRequestService;
import cn.com.cgbchina.trade.dao.OrderMainDao;
import cn.com.cgbchina.trade.dao.OrderSubDao;
import cn.com.cgbchina.trade.dao.OrderVirtualDao;
import cn.com.cgbchina.trade.dao.TblOrderExtend1Dao;
import cn.com.cgbchina.trade.dto.*;
import cn.com.cgbchina.trade.manager.OrderDealManager;
import cn.com.cgbchina.trade.manager.OrderTradeManager;
import cn.com.cgbchina.trade.model.*;
import cn.com.cgbchina.user.dto.MessageDto;
import cn.com.cgbchina.user.model.TblVendorRatioModel;
import cn.com.cgbchina.user.model.VendorInfoModel;
import cn.com.cgbchina.user.service.NewMessageService;
import cn.com.cgbchina.user.service.UserInfoService;
import cn.com.cgbchina.user.service.VendorService;
import com.google.common.base.Function;
import com.google.common.base.Strings;
import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import com.spirit.common.model.Response;
import com.spirit.exception.ResponseException;
import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.*;

/**
 * Created by shangqinbin on 2016/6/29.
 */
@Service
@Slf4j
public class OrderDealServiceImpl implements OrderDealService {

    @Autowired
    private StagingRequestService stagingRequestService;
    @Autowired
    private PaymentService paymentService;
    @Autowired
    private IdGenarator idGenarator;
    @Autowired
    private OrderMainDao orderMainDao;
    @Autowired
    private OrderSubDao orderSubDao;
    @Autowired
    private TblOrderExtend1Dao tblOrderExtend1Dao;
    @Autowired
    private GoodsPayWayService goodsPayWayService;
    @Autowired
    private ItemService itemService;
    @Autowired
    private GoodsService goodsService;
    @Autowired
    private UserInfoService userInfoService;
    @Autowired
    private OrderTradeManager orderTradeManager;
    @Autowired
    private VendorService vendorService;
    @Autowired
    private OrderVirtualDao orderVirtualDao;
    @Autowired
    private OrderSendForO2OService orderSendForO2OService;
    @Autowired
    private NewMessageService newMessageService;
    @Autowired
    private OrderDealManager orderDealManager;

    @Override
    public Response<DealPayResult> makeOrderTradeInfo(PayOrderInfoDto payOrderInfoDto) {
        log.info("处理支付网关返回的报文 makeFQOrderInfo");
        Response<DealPayResult> response = Response.newResponse();
        DealPayResult result = new DealPayResult();
        result.setOrderDealDto(new OrderDealDto());
        response.setResult(result);
        // 更新渠道
        createOrderSourceId(Contants.CHANNEL_MALL_CODE, payOrderInfoDto.getOrderid());
        // 解析web传过来的dto
        analyzeWebDto(payOrderInfoDto, response);
        if (!response.isSuccess()) {
            return response;
        }
        // 判断返回报文的类型 FQ：广发分期 YG：广发一期 JF：积分支付
        // 分期
        if ("FQ".equals(response.getResult().getOrderMainModel().getOrdertypeId())) {
            log.info("如果是分期,发起ops分期订单申请");
            // 构建分期支付信息
            makeFQOrderInfo(payOrderInfoDto, response);
            if (!response.isSuccess()) {
                return response;
            }
        }
        return response;
    }

    @Override
    public Response<Boolean> createOrderSourceId(String sourceId, String orderMainId) {
        Response<Boolean> ret = new Response<>();
        orderDealManager.updateSourceId(sourceId, orderMainId);
        ret.setSuccess(true);
        return ret;
    }

    /**
     * 处理支付网关返回的报文
     */
    @Override
    public Response<DealPayResult> dealPay(PayOrderInfoDto payOrderInfoDto, OrderMainModel orderMainModel, List<OrderPealPayInfoDto> payOrderIfDtos) {
        // 开始组合返回报文
        OrderDealDto orderDealDto = new OrderDealDto();
        orderDealDto.setType("response");
        orderDealDto.setRetcode("0");
        orderDealDto.setErrorCode("0000");
        Response<DealPayResult> response = Response.newResponse();
        DealPayResult result = new DealPayResult();
        result.setOrderDealDto(orderDealDto);
        response.setResult(result);

        try {
            String orderType = orderMainModel.getOrdertypeId();
            orderDealDto.setPhone(orderMainModel.getContMobPhone());// 手机号码，发短信用
            orderDealDto.setMessageFlag(returnMegFlag(orderMainModel));// 手机号码，发短信用
            List orders = Lists.newArrayList();
            if ("YG".equals(orderType)) {// 一期
                orders = dealYGOrder(payOrderInfoDto, orderMainModel);
                dealO2OOrderAfterPaySucc(orders);// 如果包含支付成功的O2O订单，则推送到O2O系统
                getLGReturnDoc(orderDealDto, orders);// 获取返回报文
                getIsSucessDoc(orderDealDto, orders);
                orderDealDto.setOrderType("YG");
            } else if ("FQ".equals(orderType)) {// 分期
                orders = dealFQOrder(payOrderInfoDto, orderMainModel, payOrderIfDtos);
                dealO2OOrderAfterPaySucc(orders);// 如果包含支付成功的O2O订单，则推送到O2O系统
                getFQReturnDoc(orderDealDto, orders);// 获取返回报文
                getFQIsSucessDoc(orderDealDto, orders);
                orderDealDto.setOrderType("FQ");
            } else if ("JF".equals(orderType)) {// 积分
                orders = dealJFOrder(payOrderInfoDto, orderMainModel);
                if (orders != null && orders.size() > 0) {
                    OrderSubModel subModel = (OrderSubModel)orders.get(0);
                    response.getResult().setGoodsType(subModel.getGoodsType());
                    response.getResult().setGoodsName(subModel.getGoodsNm());
                }
                dealO2OOrderAfterPaySucc(orders);// 如果包含支付成功的O2O订单，则推送到O2O系统
                getJFReturnDoc(orderDealDto, orderMainModel, orders);// 获取返回报文
                getIsSucessDoc(orderDealDto, orders);
                orderDealDto.setOrderType("JF");
            }
        } catch (Exception e) {
            log.error("一期/分期/积分处理失败:{}", e.getMessage());
            orderDealDto.setErrorCode("9999");
        }
        response.getResult().setOrderDealDto(orderDealDto);
        return response;
    }

    /**
     * 现金部分不为0，调用BPS的接口
     * @param orderMainModel
     * @param orderSubModel
     * @param payOrderIfDto
     * @param payAccountNo
     */
    private void sendOpsFQOrderInfo(OrderMainModel orderMainModel, OrderSubModel orderSubModel, OrderPealPayInfoDto payOrderIfDto, String payAccountNo) {
        try {
            log.info("现金部分不为0，调用BPS的接口");
            String errorcode = "";
            String approveresult = "";
            String extend1 = "";// 0或空:没发送过给bps 1:发送过给bps
            TblOrderExtend1Model tblOrderExtend = payOrderIfDto.getTblOrderExtend1Model();
            if (tblOrderExtend != null) {
                errorcode = tblOrderExtend.getErrorcode();
                approveresult = tblOrderExtend.getApproveresult();
                extend1 = tblOrderExtend.getExtend1();
            }
            if (!"1".equals(extend1)) { // 如果没发送过给bps系统
                //取得单品详情
                Response<ItemModel> itemModelResponse = itemService.findByItemcode(orderSubModel.getGoodsId());
                if(!itemModelResponse.isSuccess()){
                    log.error("Response.error,error code: {}", itemModelResponse.getError());
                    throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
                }
                ItemModel itemModel = itemModelResponse.getResult();

                //取得商品详情
                Response<GoodsModel> goodsModelResponse = goodsService.findById(itemModel.getGoodsCode());
                if(!goodsModelResponse.isSuccess()){
                    log.error("Response.error,error code: {}", goodsModelResponse.getError());
                    throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
                }
                GoodsModel goodsModel = goodsModelResponse.getResult();

                log.info("没发送过给bps系统");
                Response<TblGoodsPaywayModel> tblGoodsPaywayModelResponse = goodsPayWayService.findGoodsPayWayInfo(orderSubModel.getGoodsPaywayId());
                if(!tblGoodsPaywayModelResponse.isSuccess()){
                    log.error("Response.error,error code: {}", tblGoodsPaywayModelResponse.getError());
                    throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
                }
                TblGoodsPaywayModel tblGoodsPaywayModel = tblGoodsPaywayModelResponse.getResult();
                StagingRequest stagingRequest = new StagingRequest();
                stagingRequest.setSrcCaseId(orderSubModel.getOrderId());
                stagingRequest.setInterfaceType("0");
                stagingRequest.setCardnbr(payAccountNo);
                stagingRequest.setIdNbr(orderMainModel.getContIdcard());
                stagingRequest.setChannel("070");
                stagingRequest.setProject("");
                stagingRequest.setRequestType("2");
                stagingRequest.setCaseType("0500");
                stagingRequest.setSubCaseType("0501");
                stagingRequest.setCreator(orderMainModel.getCreateOper());
                stagingRequest.setBookDesc(orderMainModel.getCsgPhone1());
                stagingRequest.setReceiveMode("02");
                stagingRequest.setAddr(orderMainModel.getCsgProvince() + orderMainModel.getCsgCity() + orderMainModel.getCsgBorough() + orderMainModel.getCsgAddress());// 省+市+区+详细地址
                stagingRequest.setPostcode(orderMainModel.getCsgPostcode());
                stagingRequest.setDrawer(orderMainModel.getInvoice());
                stagingRequest.setSendCode("D");
                stagingRequest.setRegulator("1");
                stagingRequest.setSmsnotice("1");
                stagingRequest.setSmsPhone("");
                stagingRequest.setContactNbr1(orderMainModel.getCsgPhone1());
                stagingRequest.setContactNbr2(orderMainModel.getCsgPhone2());
                stagingRequest.setSbookid(orderMainModel.getOrdermainId());
                stagingRequest.setBbookid("");
                stagingRequest.setReservation("0");
                stagingRequest.setReserveTime("");
                stagingRequest.setCerttype(CardUtil.getbpsFromPerBankCardType(orderMainModel.getContIdType()));
                stagingRequest.setUrgentLvl("0200");
                stagingRequest.setMichelleId("");
                stagingRequest.setOldBankId("");
                stagingRequest.setProductCode(itemModel.getMid());// 分期编码
                stagingRequest.setProductName(orderSubModel.getGoodsNm());
                stagingRequest.setPrice(tblGoodsPaywayModel.getGoodsPrice());  // 分期总价
                stagingRequest.setColor(orderSubModel.getGoodsColor());
                stagingRequest.setAmount("1");
                stagingRequest.setSumAmt(orderSubModel.getTotalMoney());
                stagingRequest.setSuborderid(orderSubModel.getOrderId());
                stagingRequest.setFirstPayment(new BigDecimal(0));
                stagingRequest.setBills(orderSubModel.getStagesNum().toString());
                stagingRequest.setPerPeriodAmt(orderSubModel.getIncTakePrice());
                stagingRequest.setSupplierCode(orderSubModel.getVendorId());
                List<TblVendorRatioModel> vendorRatio = queryVendorRatio(orderSubModel.getStagesNum().toString(),
                        orderSubModel.getVendorId());
                if (vendorRatio.size() > 0) {
                    TblVendorRatioModel tblVendorRatioModel = vendorRatio.get(0);
                    Response<VendorInfoModel> vendorInfoModelResponse = userInfoService.findVendorInfoByVendorId(tblVendorRatioModel.getVendorId());
                    if(!vendorInfoModelResponse.isSuccess()){
                        log.error("Response.error,error code: {}", vendorInfoModelResponse.getError());
                        throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
                    }
                    VendorInfoModel vendorInfoModel = vendorInfoModelResponse.getResult();
                    stagingRequest.setFixedFeeHTFlag(tblVendorRatioModel.getFixedfeehtFlag());
                    stagingRequest.setFixedAmtFee(tblVendorRatioModel.getFixedamtFee() == null ? new BigDecimal(0)
                            : tblVendorRatioModel.getFixedamtFee().setScale(2, BigDecimal.ROUND_DOWN));
                    stagingRequest.setFeeRatio1(tblVendorRatioModel.getFeeratio1() == null ? new BigDecimal(0)
                            : tblVendorRatioModel.getFeeratio1().setScale(5, BigDecimal.ROUND_DOWN));
                    stagingRequest.setRatio1Precent(tblVendorRatioModel.getRatio1Precent() == null
                            ? new BigDecimal(0)
                            : tblVendorRatioModel.getRatio1Precent().setScale(2, BigDecimal.ROUND_DOWN));
                    stagingRequest.setFeeRatio2(tblVendorRatioModel.getFeeratio2() == null ? new BigDecimal(0)
                            : tblVendorRatioModel.getFeeratio2().setScale(5, BigDecimal.ROUND_DOWN));
                    stagingRequest.setRatio2Precent(tblVendorRatioModel.getRatio2Precent() == null
                            ? new BigDecimal(0)
                            : tblVendorRatioModel.getRatio2Precent().setScale(2, BigDecimal.ROUND_DOWN));
                    stagingRequest.setFeeRatio2Bill(tblVendorRatioModel.getFeeratio2Bill() == null ? 0 : tblVendorRatioModel.getFeeratio2Bill());
                    stagingRequest.setFeeRatio3(tblVendorRatioModel.getFeeratio3() == null ? new BigDecimal(0)
                            : tblVendorRatioModel.getFeeratio3().setScale(5, BigDecimal.ROUND_DOWN));
                    stagingRequest.setRatio3Precent(tblVendorRatioModel.getRatio3Precent() == null
                            ? new BigDecimal(0)
                            : tblVendorRatioModel.getRatio3Precent().setScale(2, BigDecimal.ROUND_DOWN));
                    stagingRequest.setFeeRatio3Bill(tblVendorRatioModel.getFeeratio3Bill() == null ? 0 : tblVendorRatioModel.getFeeratio3Bill());
                    stagingRequest.setReducerateFrom(tblVendorRatioModel.getReducerateFrom() == null ? 0 : tblVendorRatioModel.getReducerateFrom());
                    stagingRequest.setReducerateTo(tblVendorRatioModel.getReducerateTo() == null ? 0 : tblVendorRatioModel.getReducerateTo());
                    stagingRequest.setReduceHandingFee(tblVendorRatioModel.getReducerate() == null ? 0 : tblVendorRatioModel.getReducerate());
                    stagingRequest.setHtFlag(tblVendorRatioModel.getHtflag() == null ? "" : tblVendorRatioModel.getHtflag());
                    // 如果“首尾付本金”(HTCAPITAL)大于现金金额(tblOrder.getTotalMoney())，默认送现金金额，如果小于等于现金金额,就送首尾付本金值--大机补充需求
                    String htcapital = "";
                    BigDecimal totalMoney = orderSubModel.getTotalMoney();
                    BigDecimal hTAnt = tblVendorRatioModel.getHtant();
                    if (hTAnt == null || totalMoney == null) {
                        htcapital = hTAnt == null ? ""
                                : String.valueOf(hTAnt.setScale(2, BigDecimal.ROUND_DOWN));
                    } else {
                        if (hTAnt.compareTo(totalMoney) > 0) {//// “首尾付本金”(HTCAPITAL)大于现金金额(tblOrder.getTotalMoney())，送现金金额
                            htcapital = String
                                    .valueOf(totalMoney.setScale(2, BigDecimal.ROUND_DOWN));
                        } else {// 如果小于等于现金金额,就送首尾付本金值
                            htcapital = String.valueOf(hTAnt.setScale(2, BigDecimal.ROUND_DOWN));
                        }
                    }
                    if (!"".equals(htcapital)) {
                        stagingRequest.setHtCapital(new BigDecimal(htcapital));
                    } else {
                        stagingRequest.setHtCapital(new BigDecimal(0));
                    }
                    stagingRequest.setVirtualStore(vendorInfoModel.getVirtualVendorId() == null ? "" : vendorInfoModel.getVirtualVendorId());
                }
                stagingRequest.setSupplierDesc("");
                stagingRequest.setRecommendCardnbr("");
                stagingRequest.setRecommendname("");
                stagingRequest.setRecommendCerttype("");
                stagingRequest.setRecommendid("");
                stagingRequest.setPrevCaseId("");
                stagingRequest.setCustName(orderMainModel.getContNm());
                stagingRequest.setIncomingTel("");
                stagingRequest.setPresentName(goodsModel.getGiftDesc());
                stagingRequest.setOrdermemo("正常订单");
                stagingRequest.setForceTransfer("");
                stagingRequest.setSupplierName(orderSubModel.getVendorSnm());
                stagingRequest.setMemo("");
                stagingRequest.setReceiveName(orderMainModel.getCsgName());
                stagingRequest.setMerchantCode("");
                if (orderSubModel.getTotalMoney().intValue() != 0) { // 申请分期金额
                    stagingRequest.setAcceptAmt(orderSubModel.getTotalMoney());
                } else {
                    stagingRequest.setAcceptAmt(new BigDecimal(0));
                }
                String FAVORABLETYPE = "";// 优惠类型
                String DEDUCTAMT = "";// 抵扣金额
                if (orderSubModel.getVoucherNo() != null && !"".equals(orderSubModel.getVoucherNo())) {
                    FAVORABLETYPE = "01";
                    DEDUCTAMT = orderSubModel.getVoucherPrice().toString();
                }
                if (orderSubModel.getBonusTotalvalue() != null
                        && orderSubModel.getBonusTotalvalue().longValue() != 0) {
                    FAVORABLETYPE = "02";
                    if(orderSubModel.getUitdrtamt()!=null){
                	 DEDUCTAMT = orderSubModel.getUitdrtamt().toString();
                    }
                }
                if ((orderSubModel.getVoucherNo() != null && !"".equals(orderSubModel.getVoucherNo()))
                        && (orderSubModel.getBonusTotalvalue() != null
                        && orderSubModel.getBonusTotalvalue().longValue() != 0)) {
                    FAVORABLETYPE = "03";
                    DEDUCTAMT = orderSubModel.getVoucherPrice().add(orderSubModel.getUitdrtamt()).toString();
                }
                if ((orderSubModel.getVoucherNo() == null || "".equals(orderSubModel.getVoucherNo()))
                        && (orderSubModel.getBonusTotalvalue() == null
                        || orderSubModel.getBonusTotalvalue().longValue() == 0)) {
                    FAVORABLETYPE = "00";
                }
                stagingRequest.setFavorableType(FAVORABLETYPE);
                if (!"".equals(DEDUCTAMT)) {
                    BigDecimal bdDeductamt = new BigDecimal(DEDUCTAMT);
                    stagingRequest.setDeductAmt(bdDeductamt);
                } else {
                    stagingRequest.setDeductAmt(new BigDecimal(0));
                }
                TblOrderExtend1Model tempTblOrderExtend1 = null;
                try {
                    tempTblOrderExtend1 = new TblOrderExtend1Model();
                    tempTblOrderExtend1.setOrderId(orderSubModel.getOrderId());
                    tempTblOrderExtend1.setExtend1("1");
                    tempTblOrderExtend1.setExtend2(DateHelper.getCurrentTime());// 记录向bps发起请求的时间
                    orderDealManager.insert(tempTblOrderExtend1);// 保存TblOrderExtend1
                } catch (Exception e) {
                    log.error("保存TblOrderExtend1失败:{}", e.getMessage());
                    payOrderIfDto.setErrorCode("9999");
                    return;
                }
                payOrderIfDto.setTblOrderExtend1Model(tempTblOrderExtend1);
                log.info("开始调用发送bps接口:{}", orderSubModel.getOrderId());
                try {
                    StagingRequestResult stagingRequestResult = stagingRequestService
                            .getStagingRequest(stagingRequest);
                    log.info("收到结果:{}", stagingRequestResult);
                    log.info("支付返回值状态码retCode ---------{}",stagingRequestResult.getRetCode());
                    payOrderIfDto.setStagingRequestResult(stagingRequestResult);
                } catch (Exception e) {
                    log.error("调用bps接口异常:{}", e.getMessage());
                }

            } else { // 如果发送过给bps
                log.info("errorcode:{},approveresult:{}" + errorcode, approveresult);
                StagingRequestResult stagingRequestResult = new StagingRequestResult();
                stagingRequestResult.setErrorCode(errorcode);
                stagingRequestResult.setApproveResult(approveresult);
                payOrderIfDto.setStagingRequestResult(stagingRequestResult);
                payOrderIfDto.setIsAlreadySendBps("1");  // 空和0:没发送过,1:发送过给bps
            }
        } catch (Exception e) {// 如果连bps报异常，订单状态不做修改，等待状态回查
            log.error("调用bps接口异常:{}", Throwables.getStackTraceAsString(e));
        }
    }

    /**
     * 构建分期支付信息
     * @param payOrderInfoDto
     * @param response
     */
    private void makeFQOrderInfo(PayOrderInfoDto payOrderInfoDto, Response<DealPayResult> response) {
        OrderDealDto orderDealDto = new OrderDealDto();
        OrderPealPayInfoDto payOrderIfDto;
        List<OrderPealPayInfoDto> payOrderIfDtos = Lists.newArrayList();
        try {
            List<PayOrderSubDto> payOrderSubDtos = payOrderInfoDto.getPayOrderSubDtoList();
            String payAccountNo = payOrderInfoDto.getPayAccountNo();
            OrderMainModel orderMainModel = response.getResult().getOrderMainModel();
            if (payOrderSubDtos.size() == 1) {
                payOrderIfDto = makeAndSendFQOrderInfo(payOrderSubDtos.get(0), orderMainModel, payAccountNo);
                payOrderIfDtos.add(payOrderIfDto);
            } else {
                // 多线程执行
                ExecutorService executorService = Executors.newFixedThreadPool(payOrderSubDtos.size());
                CompletionService completionService = new ExecutorCompletionService(executorService);
                List<List<PayOrderSubDto>> payOrders = Lists.partition(payOrderSubDtos, 20);
                for (List<PayOrderSubDto> dtos : payOrders) {
                    for (PayOrderSubDto payOrderSubDto : dtos) {
                        completionService.submit(execSendOPSOrderInfo(payOrderSubDto, orderMainModel, payAccountNo));
                    }
                    for (int j = 0; j < dtos.size(); j++) {
                        payOrderIfDto = (OrderPealPayInfoDto) completionService.take().get();
                        if (payOrderIfDto.getErrorCode() != null) {
                            orderDealDto.setErrorCode("9999");
                            response.getResult().setOrderDealDto(orderDealDto);
                            response.setSuccess(false);
                            break;
                        }
                        payOrderIfDtos.add(payOrderIfDto);
                    }
                }
                executorService.shutdown();
            }
            response.getResult().setPayOrderIfDtos(payOrderIfDtos);
        } catch (Exception e) {
            log.error("查询分期订单信息异常:{}", Throwables.getStackTraceAsString(e));
            orderDealDto.setErrorCode("9999");
            response.getResult().setOrderDealDto(orderDealDto);
            response.setSuccess(false);
        }
    }
    /**
     * 异步执行处理
     */
    private Callable<OrderPealPayInfoDto> execSendOPSOrderInfo(final PayOrderSubDto payOrderSubDto, final OrderMainModel orderMainModel, final String payAccountNo) {
        Callable<OrderPealPayInfoDto> ret = new Callable<OrderPealPayInfoDto>() {
            @Override
            public OrderPealPayInfoDto call() throws Exception {
                return makeAndSendFQOrderInfo(payOrderSubDto, orderMainModel, payAccountNo);
            }
        };
        return ret;
    }

    /**
     *
     * @param payOrderSubDto
     * @param orderMainModel
     * @param payAccountNo
     * @return
     */
    private OrderPealPayInfoDto makeAndSendFQOrderInfo(PayOrderSubDto payOrderSubDto, OrderMainModel orderMainModel, String payAccountNo) {
        OrderPealPayInfoDto payOrderIfDto = new OrderPealPayInfoDto();
        //取得小订单详情
        OrderSubModel orderSubModel = orderSubDao.findById(payOrderSubDto.getOrder_id());
        payOrderIfDto.setPayOrderSubDto(payOrderSubDto);
        payOrderIfDto.setOrderSubModel(orderSubModel);
        String returnCode = payOrderSubDto.getReturnCode();// 返回码
        log.info("returnCode:{}", returnCode);
        // 如果现金部分不为0 或者走旧流程，调用BPS的接口
        // 如果支付网关返回验证成功
        if (PayReturnCode.isSucess(returnCode)) {
            log.info("支付网关返回验证成功");
            // 如果现金部分为0
            if (BigDecimal.ZERO.compareTo(orderSubModel.getTotalMoney()) == 0) {
                log.info("现金部分为0");
                // 如果现金部分为0
                TblOrderExtend1Model tblOrderExtend = null;
                try {
                    tblOrderExtend = new TblOrderExtend1Model();
                    tblOrderExtend.setOrderId(orderSubModel.getOrderId());
                    tblOrderExtend.setExtend1("1");
                    tblOrderExtend.setExtend2(DateHelper.getCurrentTime());// 记录向bps发起请求的时间
                    orderDealManager.insert(tblOrderExtend);// 保存TblOrderExtend1
                } catch (Exception e) {
                    log.error("保存订单扩展表1错误:{}", e.getMessage());
                    payOrderIfDto.setErrorCode("9999");
                    return payOrderIfDto;
                }
                payOrderIfDto.setTblOrderExtend1Model(tblOrderExtend);
                log.info("现金部分为0，则不调用BPS的接口，直接处理为支付成功");
                StagingRequestResult stagingRequestResult = returnBPSVO();
                log.info("收到结果:" + stagingRequestResult);
                payOrderIfDto.setStagingRequestResult(stagingRequestResult);
            } else { //如果现金部分为0，则不调用BPS的接口，直接处理为支付成功
                //取得订单扩展表1
                TblOrderExtend1Model tblOrderExtend1Model = tblOrderExtend1Dao.findByOrderId(payOrderSubDto.getOrder_id());
                payOrderIfDto.setTblOrderExtend1Model(tblOrderExtend1Model);
                // 现金部分不为0，调用BPS的接口
                sendOpsFQOrderInfo(orderMainModel, orderSubModel, payOrderIfDto, payAccountNo);
            }
        }
        return payOrderIfDto;
    }

    /**
     *
     * 解析webDto
     * @param payOrderInfoDto
     * @param response
     * @return
     */
    private void analyzeWebDto(PayOrderInfoDto payOrderInfoDto, Response<DealPayResult> response) {
        OrderMainModel orderMainModel = new OrderMainModel();
        try {
            response.getResult().getOrderDealDto().setType("response");
            response.getResult().getOrderDealDto().setErrorCode("0000");
            orderMainModel = orderMainDao.findById(payOrderInfoDto.getOrderid());
            String isOver = jugOverdeal(orderMainModel);
            if (payOrderInfoDto.getIsPayment()) {
                if ("1".equals(isOver)) {// 如果是重复收到支付网关结果
                    response.getResult().getOrderDealDto().setErrorCode("3333");
                    log.info("您好，订单正在受理中，请稍后查询订单信息，谢谢！");
                } else if ("3".equals(isOver)) {
                    response.getResult().getOrderDealDto().setErrorCode("9999");
                    response.setSuccess(false);
                }
            }
        } catch (Exception e) {
            response.getResult().getOrderDealDto().setErrorCode("9999");
            log.error("解析报文失败:{}", e.getMessage());
            response.setSuccess(false);
        }
        response.getResult().setOrderMainModel(orderMainModel);
    }

    /**
     * 判断此订单是否收到重复的支付网关结果请求 0或空:第一次收到支付网关结果 1:重复收到支付网关结果
     *
     * @param orderMainModel
     */
    private String jugOverdeal(OrderMainModel orderMainModel) throws Exception {
        String locked_flag = orderMainModel.getLockedFlag(); // 0或空:第一次收到支付网关结果 1:重复收到支付网关结果
        String curStatusId = orderMainModel.getCurStatusId();
        if ("1".equals(locked_flag) || !"0301".equals(curStatusId)) {// 如果是重复收到支付网关结果
            return "1";
        }
        if ("0".equals(locked_flag)) {// 如果第一次收到支付网关结果,将locked_flag改为1
            // 如果第一次收到支付网关结果,将locked_flag改为1
            try {
                int i = orderDealManager.updateLockedFlag(orderMainModel.getOrdermainId());
                if (i > 0) {// 如果修改有大于0条
                    return "0";
                } else {
                    return "1";
                }
            } catch (Exception e) {
                log.error("更新locked_flag订单信息异常:{}", e.getMessage());
                return "3";
            }
        }
        return "0";
    }

    /**
     * 现金部分为0，则不调用BPS的接口，直接处理为支付成功
     */
    private StagingRequestResult returnBPSVO() {
        StagingRequestResult stagingRequestResult = new StagingRequestResult();
        stagingRequestResult.setErrorCode("0000");// Bps返回的错误码
        stagingRequestResult.setApproveResult("0010");// Bps返回的返回码0000-全额,0010-逐期,0100-拒绝,0200-转人工,0210-异常转人工
        stagingRequestResult.setFollowDir("");// 后续流转方向0-不流转,1-流转
        stagingRequestResult.setCaseId("");// BPS工单号
        stagingRequestResult.setSpecialCust("");// 是否黑灰名单,0-黑名单,1-灰名单,2-其他
        stagingRequestResult.setRejectcode("");// 拒绝代码
        stagingRequestResult.setAprtcode("");// 逐期代码
        stagingRequestResult.setOrdernbr("00000000000");// 核心订单号、银行订单号,默认11个0
        return stagingRequestResult;
    }

    /**
     * 查询比率表
     *
     * @param stages_num
     * @param vendor_id
     */
    private List<TblVendorRatioModel> queryVendorRatio(String stages_num, String vendor_id) throws Exception {
        Response<List<TblVendorRatioModel>> list = userInfoService.findVendorRatioInfo(vendor_id, stages_num);
        if(!list.isSuccess()){
            log.error("Response.error,error code: {}", list.getError());
            throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
        }
        return list.getResult();
    }

    /**
     * 查询虚拟礼品订单扩展表
     *
     * @param orderMainModel
     * @return
     */
    private String returnMegFlag(OrderMainModel orderMainModel) {
        List<OrderSubModel> orderSubModels = orderSubDao.findByOrderMainId(orderMainModel.getOrdermainId());
        List<String> orderIds = Lists.transform(orderSubModels, new Function<OrderSubModel, String>() {
            @Override
            public String apply(@NotNull OrderSubModel input) {
                return input.getOrderId();
            }
        });
        List<OrderVirtualModel> orderVirtualModels = orderVirtualDao.findListByIds(orderIds);
        if (orderVirtualModels != null && orderVirtualModels.size() > 0) {
            return "1";// 移动卡产品标志
        }
        return "0";
    }

    /**
     * 处理广发一次性订单
     *
     * @param payOrderInfoDto
     * @param orderMainModel
     */
    private List<OrderSubModel> dealYGOrder(PayOrderInfoDto payOrderInfoDto, OrderMainModel orderMainModel) throws Exception {
        String payAccountNo = payOrderInfoDto.getPayAccountNo();// 支付卡号
        String cardType = CardUtil.getCardType(payAccountNo);// 借记卡信用卡类型 C：信用卡 Y：借记卡
        List<OrderSubModel> orders = new ArrayList();
        List<PayOrderSubDto> list = payOrderInfoDto.getPayOrderSubDtoList();// 获取小订单列表
        // 判断是否重复支付标志,如果返回错误码PP031001，商城不会改变当前订单的状态，
        // 同时判断此订单当前状态，如果支付成功，提示支付成功，如果支付失败，提示支付失败，
        // 如果是待付款或订单状态未明，提示订单状态未明(等待状态回查任务会查到真正的订单状态)
        String isDuplicateFlag = "0";// 0:非重复支付 1:重复支付
        if (list == null || list.size() < 1) {
            log.info("没有订单");
        }
        boolean orderMainFlag = true;

        List<OrderSubModel> orderSubModelList = new ArrayList<OrderSubModel>();  //事物用，插入子订单表
        List<String> goodsIdList = new ArrayList<String>();                         //事物用，回滚商品库存
        List<OrderSubModel> dealPointPoolList = new ArrayList<OrderSubModel>(); //事物用，回滚积分池
        List<OrderCheckModel> orderCheckModelList = new ArrayList<OrderCheckModel>(); //事物用，优惠券对账文件表
        for (PayOrderSubDto node : list) {
            OrderCheckModel orderCheck = null;
            OrderSubModel orderSubModel = orderSubDao.findById(node.getOrder_id());
            if (payOrderInfoDto.getSendTime() != null) {
                orderSubModel.setOrder_succ_time(DateHelper.string2Date(payOrderInfoDto.getSendTime(), DateHelper.YYYYMMDDHHMMSS));
            }
            String nowCur_status_id = null;// 订单当前状态
            String returnCode = node.getReturnCode(); // 返回码
            if (payAccountNo != null && !"".equals(payAccountNo.trim())) {// 如果payAccountNo不为空
                orderSubModel.setCardno(payAccountNo);
            }
            if (cardType != null && !"".equals(cardType.trim())) {// 如果payAccountNo不为空
                orderSubModel.setCardtype(cardType);
            }

            String ischeck = "";
            String ispoint = "";
            if (PayReturnCode.isSucess(returnCode)) {// 成功支付
                log.info("支付成功");
                orderSubModel.setCurStatusId("0308");// 当前状态代码
                orderSubModel.setCurStatusNm("支付成功");// 当前状态名称
            } else if (PayReturnCode.isStateNoSure(returnCode)) {// 状态未明
                log.info("状态未明");
                orderSubModel.setCurStatusId("0316");// 当前状态代码
                orderSubModel.setCurStatusNm("状态未明");// 当前状态名称
                orderMainFlag = false;
            } else if (PayReturnCode.isDuplicate(returnCode)) {// 重复支付
                log.info("重复支付");
                isDuplicateFlag = "1";
                nowCur_status_id = orderSubModel.getCurStatusId();// 获取订单当前状态
                log.info("订单当前状态:" + nowCur_status_id);
            } else {
                log.info("支付失败");
                if (orderSubModel.getErrorCode() == null || "".equals(orderSubModel.getErrorCode().trim())) {// 如果没成功返回过支付结果
                    log.info("没成功返回过支付结果，做相关回滚动作");
                    goodsIdList.add(orderSubModel.getGoodsId());     //事物用 回滚库存
                    if (orderSubModel.getBonusTotalvalue() != null && orderSubModel.getBonusTotalvalue().longValue() != 0) {
                        dealPointPoolList.add(orderSubModel);  //事物用 回切积分池.
                    }
                }
                orderSubModel.setCurStatusId("0307");// 当前状态代码
                orderSubModel.setCurStatusNm("支付失败");// 当前状态名称
                if (orderSubModel.getVoucherNo() != null && !"".equals(orderSubModel.getVoucherNo())) {
                    ischeck = "0";
                    orderCheck = getObject(node.getOrder_id(), "0307", "支付失败", ischeck, ispoint);// 获取优惠券对账表的对象
                }
                orderMainFlag = false;
            }
            orderSubModel.setErrorCode(returnCode);
            orderSubModelList.add(orderSubModel);   //事物用
            if (orderCheck != null) {
                orderCheckModelList.add(orderCheck);// 存储优惠券对账表信息
            }
            orders.add(orderSubModel);
        }
        if (!"1".equals(isDuplicateFlag)) {// 如果非重复支付
            if (orderMainFlag == true) {// 大订单成功
                orderMainModel.setCurStatusId("0308");
                orderMainModel.setCurStatusNm("支付成功");
            } else {// 大订单异常
                orderMainModel.setCurStatusId("0307");
                orderMainModel.setCurStatusNm("支付失败");
            }
        }
        List<OrderDoDetailModel> orderDoDetailModelList = insertYGOrderDodetails(orders); //订单历史明细
        log.error("一期manage没进入方法前时间{}", DateTime.now());
        orderTradeManager.processMailOrder(orderSubModelList, goodsIdList, dealPointPoolList, orderCheckModelList, orderMainModel, orderDoDetailModelList);
        log.error("一期manage返回方法后时间{}",DateTime.now());

        // 插入站内消息
        createMessageInfo(orders);
        return orders;
    }

    /**
     * 处理广发分期订单
     *
     * @param payOrderInfoDto
     * @param orderMainModel
     * @param returnOrders
     */
    private List<OrderSubModel> dealFQOrder(PayOrderInfoDto payOrderInfoDto, OrderMainModel orderMainModel, List<OrderPealPayInfoDto> returnOrders)
            throws Exception {
        log.info("处理广发分期订单 start");
        final List<OrderSubModel> orders = Lists.newArrayList();
        try {
            String payAccountNo = payOrderInfoDto.getPayAccountNo();// 支付卡号
            String cardType = CardUtil.getCardType(payAccountNo);// 借记卡信用卡类型 C：信用卡
            // Y：借记卡
            if (returnOrders == null || returnOrders.size() < 1) {
                log.info("没有订单");
            }

            OrderDealPayTradeDto orderDealPayTradeDto = new OrderDealPayTradeDto();
            boolean orderMainFlag = true;
            String errorCode = null;
            String approveResult = null;
            String followdir = null;
            String caseid = null;
            String specialcust = null;
            String rejectcode = null;
            String aprtcode = null;
            String ordernbr = null;
            OrderCheckModel orderCheck;
            OrderCheckModel orderCheck2;
            OrderSubDto orderInf;
            String isDuplicateFlag = "";
            for (OrderPealPayInfoDto payOrderIfDto : returnOrders) {
                isDuplicateFlag = "";
                orderCheck2 = null;
                orderCheck = null;
                //  插入正交易
                orderInf = new OrderSubDto();
                BeanUtils.copyProperties(payOrderIfDto.getOrderSubModel(), orderInf);
                // 判断是否是荷兰式拍卖订单 act_type=3
                String act_type = orderInf.getActType();

                PayOrderSubDto node = payOrderIfDto.getPayOrderSubDto();
                String returnCode = node.getReturnCode();// 返回码
                if (payOrderInfoDto.getSendTime() != null) {
                    orderInf.setOrder_succ_time(DateHelper.string2Date(payOrderInfoDto.getSendTime(), DateHelper.YYYYMMDDHHMMSS));
                }
                orderInf.setCardno(payAccountNo);
                orderInf.setCardtype(cardType);
                // Null或’’:电子支付平台未验证 1:电子支付平台已验证
                // 1:发送过给bps
                if ("1".equals(payOrderIfDto.getIsAlreadySendBps())) {// 如果发送过给bps 只返回当前订单对象，不修改订单状态
                    orders.add(orderInf);
                    orderInf.setBpsErrorcode("");// 填一个不会有的错误码
                    continue;
                }
                StagingRequestResult returnGateVo = payOrderIfDto.getStagingRequestResult();
                if (returnGateVo != null) {
                    errorCode = StringUtils.subTopString(returnGateVo.getErrorCode(), 4);
                    approveResult = returnGateVo.getApproveResult();
                    followdir = returnGateVo.getFollowDir();
                    caseid = returnGateVo.getCaseId();
                    specialcust = returnGateVo.getSpecialCust();
                    rejectcode = returnGateVo.getRejectcode();
                    aprtcode = returnGateVo.getAprtcode();
                    ordernbr = returnGateVo.getOrdernbr();
                    log.info("errorCode:{},approveResult:{},isBp0005Sucess:{},isBp0005Dealing:{}",
                            errorCode, approveResult, BpsReturnCode.isBp0005Sucess(errorCode, approveResult), BpsReturnCode.isBp0005Dealing(errorCode, approveResult));
                    orderInf.setBpsErrorcode(errorCode);// bps错误码
                    orderInf.setApproveResult(approveResult);// bps返回码
                }

                String ischeck = "";
                String ispoint = "";
                if (!Strings.isNullOrEmpty(orderInf.getVoucherNo())) {// 优惠券
                    ischeck = "0";
                }
                if (orderInf.getBonusTotalvalue() != null && orderInf.getBonusTotalvalue().longValue() != 0L) {// 积分
                    ispoint = "0";
                }
                String ymdPoint = DateHelper.getyyyyMMdd();
                String hmsPoint = DateHelper.getHHmmss();
                if (PayReturnCode.isSucess(returnCode)) {       // 支付成功
                    // 支付成功，cash auth type 更新标识
                    orderInf.setCashAuthType("1");// 分期订单电子支付是否已经验证标识
                    // Null或’’:电子支付平台未验证 1:电子支付平台已验证
                    // 插入积分正交易
                    if ("0".equals(ispoint)) {
                        orderCheck2 = getObject(node.getOrder_id(), "0308", "支付成功", "", ispoint);
                        orderCheck2.setDoDate(ymdPoint);
                        orderCheck2.setDoTime(hmsPoint);
                    }
                    if (returnGateVo != null && errorCode != null) {
                        // bps 返回成功
                        if (approveResult != null  && BpsReturnCode.isBp0005Sucess(errorCode, approveResult)) {
                            log.info("{}分期订单支付成功", orderInf.getOrderId());
                            orderInf.setCurStatusId("0308");// 当前状态代码
                            orderInf.setCurStatusNm("支付成功");// 当前状态名称
                            if ("0".equals(ischeck)) {// 优惠券正交易
                                orderCheck = getObject(node.getOrder_id(), "0308", "支付成功", ischeck, "");// 获取优惠券对账表的对象
                                orderCheck.setDoDate(ymdPoint);
                                orderCheck.setDoTime(hmsPoint);
                            }

                            // 荷兰式拍卖订单支付成功之后更新拍卖记录PAY_FLAG
                            if ("3".equals(act_type)) {
                                orderDealPayTradeDto.getCustCartIdList().add(orderInf.getCustCartId());
                            }
                        }
                        // bps 处理中
                        else if (approveResult != null && BpsReturnCode.isBp0005Dealing(errorCode, approveResult)) {
                            log.info("分期订单处理中");
                            orderInf.setCurStatusId("0305");// 当前状态代码
                            orderInf.setCurStatusNm("处理中");// 当前状态名称

                            // 荷兰式拍卖订单支付成功之后更新拍卖记录PAY_FLAG
                            if ("3".equals(act_type)) {
                                orderDealPayTradeDto.getCustCartIdList().add(orderInf.getCustCartId());
                            }
                        }
                        // bps 状态未明
                        else if (BpsReturnCode.isBp0005NoSure(errorCode, approveResult)) {
                            log.info("分期订单状态未明");
                            orderInf.setCurStatusId("0316");// 当前状态代码
                            orderInf.setCurStatusNm("状态未明");// 当前状态名称
                        } else if (PayReturnCode.isStateNoSure(returnCode)) {// 电子支付返回状态未明,订单状态置为“状态未明”
                            log.info("电子支付返回状态码：{} 订单状态置为状态未明", returnCode);
                            orderInf.setCurStatusId("0316");// 当前状态代码
                            orderInf.setCurStatusNm("状态未明");// 当前状态名称
                        } else {
                            log.info("分期订单支付失败");
                            if (orderInf.getErrorCode() == null || "".equals(orderInf.getErrorCode().trim())) {// 如果没成功返回过支付结果
                                log.info("没成功返回过支付结果");
                                if (Strings.isNullOrEmpty(act_type)) {
                                    orderDealPayTradeDto.putItemStock(orderInf.getGoodsId());
                                } else {
                                    orderDealPayTradeDto.putPromotionStock(orderInf);
                                    if ("3".equals(act_type)) {// 荷兰式拍卖订单
                                        // 判断是否在5分钟内，是的话回滚荷兰式购物车，否则回滚活动和库存
                                        orderDealPayTradeDto.getDealAuctionRecordList().add(orderInf);
                                    }
                                }

                                if ("0".equals(ispoint)) {
                                    orderDealPayTradeDto.getDealPointPoolList().add(orderInf);// 回滚积分池
                                }
                            }
                            orderInf.setCurStatusId("0307");// 当前状态代码
                            orderInf.setCurStatusNm("支付失败");// 当前状态名称
                            orderMainFlag = false;
                            final String curDate = ymdPoint;
                            final String curTime = hmsPoint;
                            String jfRefundSerialno = "";// 主动退积分流水
                            // 存在积分需要发起撤销积分
                            if ("0".equals(ispoint)) {
                                jfRefundSerialno = idGenarator.jfRefundSerialNo();
                                log.info("主动退积分流水jfRefundSerialno:{}", jfRefundSerialno);

                                final String finalJfRefundSerialno = jfRefundSerialno;
                                final OrderSubDto finalOrderInf = orderInf;
                                ExecutorService executorService = Executors.newSingleThreadExecutor();
                                executorService.submit(new Runnable() {
                                    public void run() {
                                        try {
                                            sendNSCT009(finalOrderInf, curDate, curTime, finalJfRefundSerialno);
                                        } catch (Exception e) {
                                            log.error("商城前端 支付成功，bps失败:{}", e.getMessage());
                                        }
                                    }
                                });
                            }
                            if ("0".equals(ischeck) || "0".equals(ispoint)) {// 失败，插入优惠券、积分
                                // 负交易
                                // 电子支付成功，bps失败，负交易用当前时间（这个涉及到积分对账bms202 ）
                                orderCheck = getObject(node.getOrder_id(), "0307", "支付失败", ischeck, ispoint);// 获取优惠券对账表的对象
                                orderCheck.setDoDate(curDate);
                                orderCheck.setDoTime(curTime);
                                orderCheck.setJfRefundSerialno(jfRefundSerialno);
                            }
                        }
                        // 支付成功，bps返回不为空，更新或插入扩展表
                        TblOrderExtend1Model tblOrderExtend1Object = payOrderIfDto.getTblOrderExtend1Model();
                        if (tblOrderExtend1Object == null) {// 如果为空 插入
                            TblOrderExtend1Model tblOrderExtend1 = new TblOrderExtend1Model();
                            tblOrderExtend1.setOrderId(orderInf.getOrderId());
                            tblOrderExtend1.setErrorcode(errorCode);
                            tblOrderExtend1.setApproveresult(approveResult);
                            tblOrderExtend1.setFollowdir(followdir);
                            tblOrderExtend1.setCaseid(caseid);
                            tblOrderExtend1.setSpecialcust(specialcust);
                            tblOrderExtend1.setRejectcode(rejectcode);
                            tblOrderExtend1.setAprtcode(aprtcode);
                            tblOrderExtend1.setOrdernbr(ordernbr);
                            orderDealPayTradeDto.getTblOrderExtend1ModelIns().add(tblOrderExtend1);

                        } else {// 如果不为空 update
                            TblOrderExtend1Model tblOrderExtend1Model = new TblOrderExtend1Model();
                            tblOrderExtend1Model.setOrderExtend1Id(tblOrderExtend1Object.getOrderExtend1Id());
                            tblOrderExtend1Model.setErrorcode(errorCode);
                            tblOrderExtend1Model.setApproveresult(approveResult);
                            tblOrderExtend1Model.setFollowdir(followdir);
                            tblOrderExtend1Model.setCaseid(caseid);
                            tblOrderExtend1Model.setSpecialcust(specialcust);
                            tblOrderExtend1Model.setRejectcode(rejectcode);
                            tblOrderExtend1Model.setAprtcode(aprtcode);
                            tblOrderExtend1Model.setOrdernbr(ordernbr);
                            tblOrderExtend1Model.setOrderId(orderInf.getOrderId());
                            orderDealPayTradeDto.getTblOrderExtend1Modelupd().add(tblOrderExtend1Model);
                        }
                    } else {// bps调用异常returnGateWayEnvolopeVo==null,返回状态未明
                        log.info("bps调用异常:{} 分期订单状态未明", orderInf.getOrderId());
                        orderInf.setCurStatusId("0316");// 当前状态代码
                        orderInf.setCurStatusNm("状态未明");// 当前状态名称
                    }
                } else if (PayReturnCode.isStateNoSure(returnCode)) {// 电子支付状态未明
                    log.info("支付网关返回状态未明:{} 分期订单状态未明", orderInf.getOrderId());
                    orderInf.setCurStatusId("0316");
                    orderInf.setCurStatusNm("状态未明");
                } else if (PayReturnCode.isDuplicate(returnCode)) {// 重复支付
                    log.info("重复支付");
                    isDuplicateFlag = "1";
                    log.info("订单当前状态:" + orderInf.getCurStatusId());
                    continue;
                } else { // 支付返回验证失败
                    log.info("{}分期订单支付失败", orderInf.getOrderId());
                    if (orderInf.getErrorCode() == null || "".equals(orderInf.getErrorCode().trim())) {// 如果没成功返回过支付结果
                        log.info("没成功返回过支付结果");
                        if (Strings.isNullOrEmpty(act_type)) {
                            orderDealPayTradeDto.putItemStock(orderInf.getGoodsId());
                        } else {
                            orderDealPayTradeDto.putPromotionStock(orderInf);
                            if ("3".equals(act_type)) {// 荷兰式拍卖订单
                                // 判断是否在5分钟内，是的话回滚荷兰式购物车，否则回滚活动和库存
                                orderDealPayTradeDto.getDealAuctionRecordList().add(orderInf);
                            }
                        }
                        if ("0".equals(ispoint)) {
                            orderDealPayTradeDto.getDealPointPoolList().add(orderInf);// 回滚积分池
                        }
                    }
                    orderInf.setCurStatusId("0307");// 当前状态代码
                    orderInf.setCurStatusNm("支付失败");// 当前状态名称
                    orderMainFlag = false;
                    if ("0".equals(ischeck)) {// 支付失败，插入优惠券负交易，不插积分负交易
                        orderCheck = getObject(node.getOrder_id(), "0307", "支付失败", ischeck, "");
                        orderCheck.setDoDate(DateHelper.date2string(orderInf.getCreateTime(), "yyyyMMdd"));
                        orderCheck.setDoTime(DateHelper.date2string(orderInf.getCreateTime(), "HHmmss"));
                    }
                }
                orderInf.setErrorCode(returnCode);
                orderDealPayTradeDto.getOrderSubModelList().add(orderInf);
                orders.add(orderInf);
                if (orderCheck2 != null) {// 支付成功，查积分正交易
                    orderDealPayTradeDto.getOrderCheckList2().add(orderCheck2);
                }
                if (orderCheck != null) {// 如果使用了优惠券ID
                    orderDealPayTradeDto.getOrderCheckList().add(orderCheck);
                }
            }
            if (!"1".equals(isDuplicateFlag)) {// 如果非重复支付
                if (orderMainFlag == true) {// 大订单成功
                    orderMainModel.setCurStatusId("0308");
                    orderMainModel.setCurStatusNm("支付成功");
                } else {// 大订单异常
                    orderMainModel.setCurStatusId("0307");
                    orderMainModel.setCurStatusNm("支付失败");
                }
            }

            List<OrderDoDetailModel> orderDoDetailModelList = addFQOrderDodetails(orders); //订单历史明细
            orderTradeManager.processInstallment(orderDealPayTradeDto, orderMainModel, orderDoDetailModelList);
            // 插入站内消息
            createMessageInfo(orders);
        } catch (Exception e) {
            log.error("**********error:{}", Throwables.getStackTraceAsString(e));
            throw new Exception(e);
        }
        return orders;
    }

    private void createMessageInfo(final List<OrderSubModel> msgOrders) {
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            public void run() {
                try {
                    //插入站内消息
                    for (OrderSubModel orderSubModel : msgOrders) {
                        MessageDto messageDto = new MessageDto();
                        messageDto.setOrderId(orderSubModel.getOrderId());// 子订单号
                        messageDto.setOrderStatus(orderSubModel.getCurStatusId()); //订单状态
                        messageDto.setGoodName(orderSubModel.getGoodsNm());// 商品名称
                        messageDto.setCustId(orderSubModel.getCreateOper()); // 会员号
                        messageDto.setVendorId(orderSubModel.getVendorId()); //供应商ID
                        messageDto.setUserType("02");//用户类型  01供应商  02商城  03内管
                        messageDto.setCreateOper("System");;// 创建人
                        newMessageService.insertUserMessage(messageDto);
                    }
                } catch (Exception e) {
                    log.error("站内消息插入 异常error:{}", Throwables.getStackTraceAsString(e));
                }
            }
        });
    }

    /**
     * 处理积分订单
     *
     * @param payOrderInfoDto
     * @param orderMainModel
     */
    private List<OrderSubModel> dealJFOrder(PayOrderInfoDto payOrderInfoDto, OrderMainModel orderMainModel)
            throws Exception {
        List<PayOrderSubDto> list = payOrderInfoDto.getPayOrderSubDtoList();// 获取大订单
        if (list == null || list.size() < 1) {
            log.info("没有大订单");
        } else if (list.size() != 1) {
            log.info("订单数量错误");
        }
        List<OrderSubModel> theOrders = new ArrayList<OrderSubModel>();
        List<OrderSubModel> subList = orderSubDao.findByOrderMainId(orderMainModel.getOrdermainId());  // 获取小订单
        if (subList == null || subList.size() < 1) {// 如果没有小订单
            log.info("没有小订单");
        }
        List<OrderSubModel> orderSubModelList = new ArrayList<OrderSubModel>();  //事物用，更新子订单表
        List<OrderSubModel> orderSubModelListRollBack = new ArrayList<OrderSubModel>();  //事物用，回滚活动,生日，库存
        for (PayOrderSubDto node : list) {
            String returnCode = node.getReturnCode(); // 返回码
            orderMainModel.setErrorCode(returnCode);// 设置返回码

            if (PayReturnCode.isSucess(returnCode)) {// 成功支付
                log.info("支付成功");
                orderMainModel.setCurStatusId("0308");// 当前状态代码
                orderMainModel.setCurStatusNm("支付成功");// 当前状态名称
                orderMainModel.setPayResultTime(DateHelper.getyyyyMMddHHmmss(new Date()));// 支付结果时间

                for (OrderSubModel orderInf : subList) {// 循环处理小订单状态
                    orderInf.setCurStatusId("0308");// 当前状态代码
                    orderInf.setCurStatusNm("支付成功");// 当前状态名称
                    orderInf.setErrorCode(returnCode);// 设置返回码

                    if (payOrderInfoDto.getSendTime() != null) {
                        orderInf.setOrder_succ_time(DateHelper.string2Date(payOrderInfoDto.getSendTime(), DateHelper.YYYYMMDDHHMMSS));
                    }

                    orderSubModelList.add(orderInf);
                    theOrders.add(orderInf);
                }
            } else if (PayReturnCode.isStateNoSure(returnCode)) {// 状态未明
                log.info("状态未明");
                orderMainModel.setCurStatusId("0316");// 当前状态代码
                orderMainModel.setCurStatusNm("状态未明");// 当前状态名称
                for (OrderSubModel orderInf : subList) {// 循环处理小订单状态

                    if (payOrderInfoDto.getSendTime() != null) {
                        orderInf.setOrder_succ_time(DateHelper.string2Date(payOrderInfoDto.getSendTime(), DateHelper.YYYYMMDDHHMMSS));
                    }
                    orderInf.setCurStatusId("0316");// 当前状态代码
                    orderInf.setCurStatusNm("状态未明");// 当前状态名称
                    orderInf.setErrorCode(returnCode);// 设置返回码
                    orderSubModelList.add(orderInf);
                    theOrders.add(orderInf);
                }
            } else if (PayReturnCode.isDuplicate(returnCode)) {// 重复支付
                log.info("重复支付");
                for (OrderSubModel orderInf : subList) {// 循环处理小订单状态
                    if (payOrderInfoDto.getSendTime() != null) {
                        orderInf.setOrder_succ_time(DateHelper.string2Date(payOrderInfoDto.getSendTime(), DateHelper.YYYYMMDDHHMMSS));
                    }
                    orderInf.setErrorCode(returnCode);// 设置返回码
                    orderSubModelList.add(orderInf);
                    theOrders.add(orderInf);
                }
            } else {// 支付失败
                log.info("支付失败");
                orderMainModel.setCurStatusId("0307");// 当前状态代码
                orderMainModel.setCurStatusNm("支付失败");// 当前状态名称
                orderMainModel.setPayResultTime(DateHelper.getyyyyMMddHHmmss(new Date()));// 支付结果时间
                for (OrderSubModel orderInf : subList) {// 循环处理小订单状态
                    if (orderInf.getErrorCode() == null || "".equals(orderInf.getErrorCode().trim())) {// 如果没成功返回过支付结果
                        log.info("没成功返回过支付结果");
                        orderSubModelListRollBack.add(orderInf);// 回滚活动 处理生日 回滚库存
                    }
                    if (payOrderInfoDto.getSendTime() != null) {
                        orderInf.setOrder_succ_time(DateHelper.string2Date(payOrderInfoDto.getSendTime(), DateHelper.YYYYMMDDHHMMSS));
                    }
                    orderInf.setCurStatusId("0307");// 当前状态代码
                    orderInf.setCurStatusNm("支付失败");// 当前状态名称
                    orderInf.setErrorCode(returnCode);// 设置返回码
                    orderSubModelList.add(orderInf);
                    theOrders.add(orderInf);
                }
            }
        }
        List<OrderDoDetailModel> orderDoDetailModelList = insertJFOrderDodetails(theOrders); //订单历史明细
        orderTradeManager.processPoints(orderSubModelList, orderSubModelListRollBack, orderDoDetailModelList, orderMainModel);
        // 插入站内消息
        createMessageInfo(theOrders);
        return theOrders;
    }

    /**
     * 获取优惠券对账文件表对象
     *
     * @param order_id
     * @param cur_status_id
     * @param cur_status_nm
     * @return
     */
    public OrderCheckModel getObject(String order_id, String cur_status_id, String cur_status_nm, String ischeck,
                                     String ispoint) {
        OrderCheckModel orderCheck = new OrderCheckModel();
        orderCheck.setOrderId(order_id);
        orderCheck.setCurStatusId(cur_status_id);
        orderCheck.setCurStatusNm(cur_status_nm);
        orderCheck.setDoDate(DateHelper.getyyyyMMdd());
        orderCheck.setDoTime(DateHelper.getHHmmss());
        orderCheck.setIscheck(ischeck);
        orderCheck.setIspoint(ispoint);
        orderCheck.setDelFlag(0);
        orderCheck.setCreateOper("ShopMall");
        orderCheck.setCreateTime(DateTime.now().toDate());
        return orderCheck;
    }

    /***
     * 插入一次性的订单处理明细
     *
     * @param orders
     * @throws Exception
     */
    private List<OrderDoDetailModel> insertYGOrderDodetails(List<OrderSubModel> orders) throws Exception {
        Date currTime = new Date();// 时间
        List<OrderDoDetailModel> orderDoDetailModelList = new ArrayList<OrderDoDetailModel>();
        for (int i = 0; i < orders.size(); i++) {
            OrderSubModel orderSubModel = orders.get(i);
            OrderDoDetailModel orderDoDetailModel = new OrderDoDetailModel();
            orderDoDetailModel.setOrderId((orderSubModel.getOrderId()));
            orderDoDetailModel.setDoTime(currTime);
            orderDoDetailModel.setDoUserid("System");
            orderDoDetailModel.setUserType("0");
            orderDoDetailModel.setStatusId(orderSubModel.getCurStatusId());
            orderDoDetailModel.setStatusNm(orderSubModel.getCurStatusNm());
            orderDoDetailModel.setMsgContent("");
            orderDoDetailModel.setDoDesc("广发一次性支付");
            orderDoDetailModel.setRuleId("");
            orderDoDetailModel.setRuleNm("");
            orderDoDetailModel.setCreateOper(orderSubModel.getCreateOper());
            orderDoDetailModel.setDelFlag(0);
            orderDoDetailModelList.add(orderDoDetailModel);
        }
        return orderDoDetailModelList;
    }

    /**
     * 获取广发一期返回报文
     *
     * @param orderDealDto
     * @param orders
     */
    public void getLGReturnDoc(OrderDealDto orderDealDto, List orders) {
        List<OrderDealPayResultDto> orderList = new ArrayList<OrderDealPayResultDto>();
        for (int i = 0; i < orders.size(); i++) {
            OrderSubModel orderSubModel = (OrderSubModel) orders.get(i);
            OrderDealPayResultDto orderDealPayResultDto = new OrderDealPayResultDto();
            orderDealPayResultDto.setSeq(new Integer(i + 1).toString());
            orderDealPayResultDto.setOrderId(orderSubModel.getOrderId());
            orderDealPayResultDto.setStatusId(orderSubModel.getCurStatusId());
            orderDealPayResultDto.setMoney(orderSubModel.getTotalMoney().toString());
            orderDealPayResultDto.setGoodsId(orderSubModel.getGoodsId());
            orderDealPayResultDto.setGoodName(orderSubModel.getGoodsNm());
            String privilegeMoney = "0.00";
            String single_bonus = "0";
            if (orderSubModel.getVoucherPrice() != null) {
                privilegeMoney = orderSubModel.getVoucherPrice().toString();
            }
            if (orderSubModel.getSingleBonus() != null) {
                single_bonus = orderSubModel.getSingleBonus().toString();
            }
            orderDealPayResultDto.setPrivilegeMoney(privilegeMoney);// 优惠券金额
            orderDealPayResultDto.setSingle_bonus(single_bonus);// 积分抵扣
            orderDealPayResultDto.setErrorCode(orderSubModel.getErrorCode());
            orderDealPayResultDto.setCardType(orderSubModel.getCardtype());// 卡类型,C：信用卡,Y：借记卡
            String payResult = "0";// 1:支付成功
            if ("0308".equals(orderSubModel.getCurStatusId())) {// 支付成功
                orderDealPayResultDto.setErrorMsg("支付成功");
                payResult = "1";
            } else if ("0316".equals(orderSubModel.getCurStatusId()) || "0301".equals(orderSubModel.getCurStatusId())) {// 状态未明
                orderDealPayResultDto.setErrorMsg("订单状态未明:[\" + orderSubModel.getErrorCode() + \"]请稍后查询订单结果");
            } else {
                orderDealPayResultDto.setErrorMsg("支付失败:[" + orderSubModel.getErrorCode() + "]");
            }
            orderDealPayResultDto.setPayResult(payResult);
            orderList.add(orderDealPayResultDto);
        }
        orderDealDto.setOrderList(orderList);
    }

    /**
     * 判断是全部订单成功还是部分订单成功还是全部失败，并且将结果放到返回的xml中(非分期支付)
     *
     * @param orderDealDto
     * @param orders
     */
    public void getIsSucessDoc(OrderDealDto orderDealDto, List orders) {
        String sucessFlag = "0";
        String errFlag = "0";
        String wmFlag = "0"; //状态为名
        for (int i = 0; i < orders.size(); i++) {
            OrderSubModel orderSubModel = (OrderSubModel) orders.get(i);
            String statusId = orderSubModel.getCurStatusId();// 状态
            if ("0308".equals(statusId)) {// 如果支付成功
                sucessFlag = "1";
            } else if ("0316".equals(statusId)) {
                wmFlag = "1";
            } else {
                errFlag = "1";
            }
        }
        if ("1".equals(sucessFlag) && "0".equals(errFlag)) {// 如果全部子订单成功
            orderDealDto.setSucessFlag("0");
        } else if ("0".equals(sucessFlag) && "1".equals(errFlag)) {// 如果全部子订单失败
            orderDealDto.setSucessFlag("1");
        } else {// 如果部分成功部分失败
            orderDealDto.setSucessFlag("2");
        }

        if ("1".equals(wmFlag)) {
            orderDealDto.setSucessFlag("7"); // 状态未明
        }
    }

    /**
     * 插入广发分期的订单处理明细
     *
     * @param orders
     */
    private List<OrderDoDetailModel> addFQOrderDodetails(List<OrderSubModel> orders) {
        Date currTime = new Date();// 时间
        List<OrderDoDetailModel> orderDoDetailModelList = Lists.newArrayList();
        for (OrderSubModel orderSubModel : orders) {
            OrderDoDetailModel orderDoDetailModel = new OrderDoDetailModel();
            orderDoDetailModel.setOrderId((orderSubModel.getOrderId()));
            orderDoDetailModel.setDoTime(currTime);
            orderDoDetailModel.setDoUserid("System");
            orderDoDetailModel.setUserType("0");
            orderDoDetailModel.setStatusId(orderSubModel.getCurStatusId());
            orderDoDetailModel.setStatusNm(orderSubModel.getCurStatusNm());
            orderDoDetailModel.setMsgContent("");
            orderDoDetailModel.setDoDesc("广发分期支付");
            orderDoDetailModel.setRuleId("");
            orderDoDetailModel.setRuleNm("");
            orderDoDetailModel.setCreateOper(orderSubModel.getCreateOper());
            orderDoDetailModel.setDelFlag(0);
            orderDoDetailModelList.add(orderDoDetailModel);
        }
        return orderDoDetailModelList;

    }

    /**
     * 获取分期返回报文
     *
     * @param orderDealDto
     * @param orders
     */
    public void getFQReturnDoc(OrderDealDto orderDealDto, List<OrderSubDto> orders) {
        List<OrderDealPayResultDto> orderList = Lists.newArrayList();
        for (int i = 0; i < orders.size(); i++) {
            OrderSubDto orderSubModel = (OrderSubDto) orders.get(i);
            OrderDealPayResultDto orderDealPayResultDto = new OrderDealPayResultDto();
            orderDealPayResultDto.setSeq(String.valueOf(i + 1));
            orderDealPayResultDto.setOrderId(orderSubModel.getOrderId());
            orderDealPayResultDto.setStatusId(orderSubModel.getCurStatusId());
            orderDealPayResultDto.setMoney(orderSubModel.getTotalMoney().toString());
            orderDealPayResultDto.setGoodsId(orderSubModel.getGoodsId());
            orderDealPayResultDto.setGoodName(orderSubModel.getGoodsNm());
            String privilegeMoney = "0.00";
            String single_bonus = "0";
            if (orderSubModel.getVoucherPrice() != null) {
                privilegeMoney = orderSubModel.getVoucherPrice().toString();
            }
            if (orderSubModel.getSingleBonus() != null) {
                single_bonus = orderSubModel.getSingleBonus().toString();
            }
            orderDealPayResultDto.setPrivilegeMoney(privilegeMoney);// 优惠券金额
            orderDealPayResultDto.setSingle_bonus(single_bonus);// 积分抵扣
            // 荷兰式新增act_type
            orderDealPayResultDto.setAct_type(orderSubModel.getActType());
            orderDealPayResultDto.setErrorCode(orderSubModel.getErrorCode());
            orderDealPayResultDto.setCardType(orderSubModel.getCardtype());// 卡类型 C：信用卡,Y：借记卡
            String payResult = "0";// 1:验证成功
            if ("0305".equals(orderSubModel.getCurStatusId())) {// 处理中
                orderDealPayResultDto.setErrorMsg("处理中");
                payResult = "1";
            } else if ("0308".equals(orderSubModel.getCurStatusId())) {// 支付成功
                orderDealPayResultDto.setErrorMsg("支付成功");
                payResult = "1";
            } else if ("0301".equals(orderSubModel.getCurStatusId())) {// 待付款
                orderDealPayResultDto.setErrorMsg("待付款");
            } else if ("0316".equals(orderSubModel.getCurStatusId())) {// 状态未明
                if ("RC000".equals(orderSubModel.getErrorCode())) {// 如果支付网关返回验证成功
                    orderDealPayResultDto.setErrorMsg("订单状态未明:[bps返回错误]请稍后查询订单结果");
                } else {// 如果支付网关返回验证不成功
                    orderDealPayResultDto.setErrorMsg("订单状态未明:[" + orderSubModel.getErrorCode() + "]请稍后查询订单结果");
                }
            } else {
                if ("RC000".equals(orderSubModel.getErrorCode())) {// 如果支付网关返回验证成功
                    if (!"0000".equals(orderSubModel.getBpsErrorcode())) {// 如果bps返回不成功
                        if (orderSubModel.getBpsErrorcode() == null || "".equals(orderSubModel.getBpsErrorcode().trim())) {// 如果BpsErrorcode为空(通过状态回查回来的)
                            orderDealPayResultDto.setErrorMsg("支付失败");//
                        } else {
                            orderDealPayResultDto.setErrorMsg("支付失败:[" + orderSubModel.getBpsErrorcode() + "]");
                        }
                    } else {// bps拒绝
                        orderDealPayResultDto.setErrorMsg("支付失败:[bps拒绝]");
                    }
                } else {// 如果支付网关返回验证不成功
                    orderDealPayResultDto.setErrorMsg("支付失败:[" + orderSubModel.getErrorCode() + "]");
                }
            }
            orderDealPayResultDto.setPayResult(payResult);
            orderList.add(orderDealPayResultDto);
        }
        orderDealDto.setOrderList(orderList);
    }

    /**
     * 判断是全部订单成功还是部分订单成功还是全部失败，并且将结果放到返回的xml中(分期支付)
     *
     * @param orderDealDto
     * @param orders
     */
    public void getFQIsSucessDoc(OrderDealDto orderDealDto, List<OrderSubDto> orders) {
        String sucessFlag = "0";
        String errFlag = "0";
        String proFlag = "0"; // 处理中
        String wmFlag = "0"; //状态为名
        for (OrderSubDto orderSubModel : orders) {
            String statusId = orderSubModel.getCurStatusId();// 状态
            if ("0308".equals(statusId)) {// 如果支付成功
                sucessFlag = "1";
            } else if ("0316".equals(statusId)) {// 状态未明
                wmFlag = "1";
            } else if ("0305".equals(statusId)) { // 如果处理中
                proFlag = "1";
            } else {
                errFlag = "1";
            }
        }
        if ("1".equals(sucessFlag) && "0".equals(errFlag) && "0".equals(proFlag)) {// 如果全部子订单成功
            orderDealDto.setSucessFlag("0");
        } else if ("0".equals(sucessFlag) && "1".equals(errFlag) && "0".equals(proFlag)) {// 如果全部子订单失败
            orderDealDto.setSucessFlag("1");
        } else if ("1".equals(proFlag) && "0".equals(errFlag) && "0".equals(sucessFlag)) {// 如果全部子订单处理中
            orderDealDto.setSucessFlag("3");
        } else if ("1".equals(proFlag) && "0".equals(errFlag) && "1".equals(sucessFlag)) {// 如果部分成功、部分处理中
            orderDealDto.setSucessFlag("4");
        } else if ("0".equals(proFlag) && "1".equals(errFlag) && "1".equals(sucessFlag)) {// 如果部分成功、部分失败
            orderDealDto.setSucessFlag("5");
        } else if ("1".equals(proFlag) && "1".equals(errFlag) && "0".equals(sucessFlag)) {// 如果部分处理中、部分失败
            orderDealDto.setSucessFlag("6");
        } else if ("1".equals(proFlag) && "1".equals(errFlag) && "1".equals(sucessFlag)) {
            orderDealDto.setSucessFlag("2"); // 三种状态并存 成功 失败 处理中
        }
        if ("1".equals(wmFlag)) {
            orderDealDto.setSucessFlag("7"); // 状态未明
        }
        log.info("支付返结果:{}", orderDealDto.getSucessFlag());
    }

    /**
     * 发起撤销积分申请
     *
     * @param order
     * @param curDate          撤销日期
     * @param curTime          撤销时间
     * @param jfRefundSerialno 撤销流水
     *                         jfRefundSerialno退积分流水
     */
    private void sendNSCT009(OrderSubModel order, String curDate, String curTime, String jfRefundSerialno) throws Exception {
        // bsp分期失败需要调用积分撤销接口
        log.info("开始获取nTNSCT009bean");
        ReturnPointsInfo gateWayEnvolopeVo = new ReturnPointsInfo();

        gateWayEnvolopeVo.setChannelID(sourceIdChangeToChannel(order.getSourceId()));// 渠道标识
        gateWayEnvolopeVo.setMerId(order.getMerId()); // 大商户号(商城商户号)
        gateWayEnvolopeVo.setOrderId(order.getOrderId()); // 订单号(小)
        String consumeTypeStr = "1";
        if (order.getVoucherNo() != null && !"".equals(order.getVoucherNo().trim())) {
            consumeTypeStr = "2";
        }
        gateWayEnvolopeVo.setConsumeType(consumeTypeStr); // 消费类型("0":纯积分(这里不存在)\"1":积分+现金\"2":积分+现金+优惠券)
        gateWayEnvolopeVo.setCurrency("CNY"); // 币种
        gateWayEnvolopeVo.setTranDate(curDate); // 发起方日期(当前日期)
        gateWayEnvolopeVo.setTranTiem(curTime); // 发起方时间(当前时间)
        gateWayEnvolopeVo.setTradeSeqNo(jfRefundSerialno);// 发起方流水号
        gateWayEnvolopeVo.setSendDate(DateHelper.date2string(order.getOrder_succ_time(), "yyyyMMdd")); // 原发起方日期
        gateWayEnvolopeVo.setSendTime(DateHelper.date2string(order.getOrder_succ_time(), "HHmmss")); // 原发起方时间
        gateWayEnvolopeVo.setSerialNo(order.getOrderIdHost()); // 原发起方流水号
        gateWayEnvolopeVo.setCardNo(order.getCardno()); // 卡号
        gateWayEnvolopeVo.setExpiryDate("0000"); // 卡片有效期
        gateWayEnvolopeVo.setPayMomey(new BigDecimal(0)); // 现金支付金额(默认送0)
        gateWayEnvolopeVo.setJgId(Contants.JGID_COMMON); // 积分类型
        gateWayEnvolopeVo.setDecrementAmt(order.getBonusTotalvalue()); // 扣减积分额
        gateWayEnvolopeVo.setTerminalNo("01"); // 终端号("01"广发商城，"02"积分商城)
        paymentService.returnPoint(gateWayEnvolopeVo);
    }

    /**
     * <p>Description:上送积分系统渠道标志转换</p>
     *
     * @param sourceId
     * @return
     * @author:panhui
     * @update:2014-9-4
     */
    private String sourceIdChangeToChannel(String sourceId) {
        if (Contants.SOURCE_ID_MALL.equals(sourceId)) {
            return Contants.SOURCE_ID_MALL_TYPY;
        }
        if (Contants.SOURCE_ID_CC.equals(sourceId)) {
            return Contants.SOURCE_ID_CC_TYPY;
        }
        if (Contants.SOURCE_ID_IVR.equals(sourceId)) {
            return Contants.SOURCE_ID_IVR_TYPY;
        }
        if (Contants.SOURCE_ID_CELL.equals(sourceId)) {
            return Contants.SOURCE_ID_CELL_TYPY;
        }
        if (Contants.SOURCE_ID_MESSAGE.equals(sourceId)) {
            return Contants.SOURCE_ID_MESSAGE_TYPY;
        }
        if (Contants.SOURCE_ID_WX_BANK.equals(sourceId) || Contants.SOURCE_ID_WX_CARD.equals(sourceId)) {
            return Contants.SOURCE_ID_WX_TYPY;
        }
        if (Contants.SOURCE_ID_APP.equals(sourceId)){
            return Contants.SOURCE_ID_APP_TYPY;
        }
        return Contants.SOURCE_ID_MALL_TYPY;
    }

    /**
     * 支付成功后，进行O2O订单推送处理
     *
     * @param orderList
     * @throws Exception
     */
    private void dealO2OOrderAfterPaySucc(List<OrderSubModel> orderList) throws Exception {
        try {
            if (orderList == null || orderList.size() <= 0) {
                log.info("小订单列表为空不推送 ");
                return;
            }
            VendorInfoModel vendorMap = null;
            ExecutorService executorService = Executors.newCachedThreadPool();
            for (final OrderSubModel orderInfo : orderList) {
                final String orderMainId = orderInfo.getOrdermainId();
                log.info("大订单 {} 小订单：{} 订单状态：", orderMainId, orderInfo.getOrderId()
                        + orderInfo.getCurStatusId());
                if (Contants.ORDER_STATUS_CODE_HAS_ORDERS.equals(orderInfo.getCurStatusId())) {
                    if (vendorMap == null) {
                        vendorMap = queryVendorInf(orderInfo.getVendorId());
                    } else {
                        if (!orderInfo.getVendorId().equals((String) vendorMap.getVendorId())) {
                            vendorMap = queryVendorInf(orderInfo.getVendorId());
                        }
                    }
                    if (vendorMap == null) {
                        log.info("orderId={},合作商为空不推送", orderInfo.getOrderId());
                        continue;
                    }
                    if ("3".equals(vendorMap.getVendorRole())
                            && "00".equals(vendorMap.getActionFlag()) && "02".equals(orderInfo.getGoodsType())) { // ACTION_FLAG=’00’表示实时推送
                        // 大订单下如果包含需要实时推送的O2O订单，则开启一个线程推送即可，实时推送会将该大订单下所有支付成功的O2O小单一起推送
                        executorService.submit(new Runnable() {
                            public void run() {
                                try {
                                    log.debug("异步推送O2O");
                                    orderSendForO2OService.orderSendForO2O(orderMainId, orderInfo.getOrderId());
                                } catch (Exception e) {
                                    log.error("推送异常:{}", e.getMessage());
                                }
                            }
                        });
                    }
                    if ("3".equals(vendorMap.getVendorRole())
                            && "01".equals(vendorMap.getActionFlag()) && "02".equals(orderInfo.getGoodsType())) {// ACTION_FLAG =’01’表示批量推送
                        log.info("大订单 {} 批量推送O2O商品的订单 {}", orderMainId, orderInfo.getOrderId());
                        // 这里没有进行任务是否存在的判断，因为支付一般都是第一次插入数据
                        log.info("保存到推送队列订单信息：mainOrderId= {},suborderno:{}", orderMainId, orderInfo.getOrderId());
<<<<<<< HEAD
                        
                        executorService.submit(new Runnable() {
                            public void run() {
                                try {
                                	OrderOutSystemModel orderOutSystemModel = new OrderOutSystemModel();
                                    orderOutSystemModel.setOrderId(orderInfo.getOrderId());
                                    orderOutSystemModel.setOrderMainId(orderMainId);
                                    orderOutSystemModel.setTimes(0);
                                    orderOutSystemModel.setTuisongFlag("0");
                                    orderOutSystemModel.setSystemRole("00");// O2O
                                    orderOutSystemModel.setCreateOper("来自第三方");
                                    orderDealManager.insert(orderOutSystemModel);
                                } catch (Exception e) {
                                    log.error("推送异常:{}", e.getMessage());
                                }
                            }
                        });
=======

                        OrderOutSystemModel orderOutSystemModel = new OrderOutSystemModel();
                        orderOutSystemModel.setOrderId(orderInfo.getOrderId());
                        orderOutSystemModel.setOrderMainId(orderMainId);
                        orderOutSystemModel.setTimes(0);
                        orderOutSystemModel.setTuisongFlag("0");
                        orderOutSystemModel.setSystemRole("00");// O2O
                        orderOutSystemModel.setCreateOper("来自第三方");
                        orderDealManager.insert(orderOutSystemModel);

//                        executorService.submit(new Runnable() {
//                            public void run() {
//                                try {
//                                    OrderOutSystemModel orderOutSystemModel = new OrderOutSystemModel();
//                                    orderOutSystemModel.setOrderId(orderInfo.getOrderId());
//                                    orderOutSystemModel.setOrderMainId(orderMainId);
//                                    orderOutSystemModel.setTimes(0);
//                                    orderOutSystemModel.setTuisongFlag("0");
//                                    orderOutSystemModel.setSystemRole("00");// O2O
//                                    orderOutSystemModel.setCreateOper("来自第三方");
//                                    orderDealManager.insert(orderOutSystemModel);
//                                } catch (Exception e) {
//                                    log.error("推送异常:{}", e.getMessage());
//                                }
//                            }
//                        });
>>>>>>> 216ae0b2c5513e4c79119b3499a8f555ac2f3c4b
                    }
                } else {
                    log.info("大订单: {} 小订单:{} 订单状态:{} 不推送", orderMainId, orderInfo.getOrderId(), orderInfo.getCurStatusId());
                }
            }
        } catch (Exception e) {
            log.error("推送异常:{}", e.getMessage());
        }
    }

    /**
     * 查询供应商信息表
     *
     * @param vendorId
     * @return
     */
    private VendorInfoModel queryVendorInf(String vendorId) {
        Response<VendorInfoModel> vendorInfoModel = vendorService.findVendorById(vendorId);
        if(!vendorInfoModel.isSuccess()){
            log.error("Response.error,error code: {}", vendorInfoModel.getError());
            throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
        }
        return vendorInfoModel.getResult();
    }

    /**
     * 获取积分返回报文
     *
     * @param orderDealDto
     * @param orderMainModel
     * @param orders
     */
    public void getJFReturnDoc(OrderDealDto orderDealDto, OrderMainModel orderMainModel, List<OrderSubModel> orders) {
        List<OrderDealPayResultDto> orderList = new ArrayList<OrderDealPayResultDto>();
        for (int i = 0; i < orders.size(); i++) {
            OrderSubModel orderInf = orders.get(i);
            Response<ItemModel> itemModelResponse = itemService.findByItemcode(orderInf.getGoodsId());
            if(!itemModelResponse.isSuccess()){
                log.error("Response.error,error code: {}", itemModelResponse.getError());
                throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
            }
            ItemModel itemModel = itemModelResponse.getResult();
            Response<GoodsModel> goodsModelResponse = goodsService.findById(itemModel.getGoodsCode());
            if(!goodsModelResponse.isSuccess()){
                log.error("Response.error,error code: {}", goodsModelResponse.getError());
                throw new ResponseException(Contants.ERROR_CODE_500, "Response.error");
            }
            GoodsModel goodsModel = goodsModelResponse.getResult();
            OrderDealPayResultDto orderDealPayResultDto = new OrderDealPayResultDto();
            orderDealPayResultDto.setSeq("" + (i + 1));
            orderDealPayResultDto.setOrderId(orderInf.getOrderId());
            orderDealPayResultDto.setStatusId(orderInf.getCurStatusId());
            orderDealPayResultDto.setMoney(String.valueOf(orderInf.getTotalMoney()));
            orderDealPayResultDto.setBonus_totalvalue(String.valueOf(orderInf.getBonusTotalvalue()));
            orderDealPayResultDto.setGoodsId(orderInf.getGoodsId());
            orderDealPayResultDto.setGoodName(orderInf.getGoodsNm());
            orderDealPayResultDto.setErrorCode(orderInf.getErrorCode());
            String payResult = "0";// 1:支付成功
            if ("0308".equals(orderInf.getCurStatusId())) {// 支付成功
                orderDealPayResultDto.setErrorMsg("支付成功");
                payResult = "1";
            } else if ("0316".equals(orderInf.getCurStatusId()) || "0301".equals(orderInf.getCurStatusId())) {// 状态未明
                orderDealPayResultDto.setErrorMsg("订单状态未明:[" + orderInf.getErrorCode() + "]请稍后查询订单结果");
            } else {
                orderDealPayResultDto.setErrorMsg("支付失败:[" + orderInf.getErrorCode() + "]");
            }
            orderDealPayResultDto.setPayResult(payResult);
            orderDealPayResultDto.setGoods_type(goodsModel.getGoodsType());
            orderList.add(orderDealPayResultDto);
        }
        orderDealDto.setOrderList(orderList);
        orderDealDto.setOrderId(orderMainModel.getOrdermainId());
        orderDealDto.setStatusId(orderMainModel.getCurStatusId());
        orderDealDto.setMoney(String.valueOf(orderMainModel.getTotalPrice()));
        orderDealDto.setBonus_totalvalue(String.valueOf(orderMainModel.getTotalBonus()));
        String payResult = "0";// 1:支付成功
        if ("0308".equals(orderMainModel.getCurStatusId())) {// 支付成功
            orderDealDto.setErrorMsg("支付成功");
            payResult = "1";
        } else if ("0316".equals(orderMainModel.getCurStatusId()) || "0301".equals(orderMainModel.getCurStatusId())) {// 状态未明
            orderDealDto.setErrorMsg("订单状态未明:[" + orderMainModel.getErrorCode() + "]请稍后查询订单结果");
        } else {
            orderDealDto.setErrorMsg("支付失败:[" + orderMainModel.getErrorCode() + "]");
        }
        orderDealDto.setPayResult(payResult);
    }

    /**
     * 插入积分的订单处理明细
     *
     * @param orders
     */
    private List<OrderDoDetailModel> insertJFOrderDodetails(List<OrderSubModel> orders) throws Exception {
        Date currTime = new Date();// 时间
        List<OrderDoDetailModel> orderDoDetailModelList = new ArrayList<OrderDoDetailModel>();
        for (int i = 0; i < orders.size(); i++) {
            OrderSubModel orderInf = (OrderSubModel) orders.get(i);
            OrderDoDetailModel orderDoDetailModel = new OrderDoDetailModel();
            orderDoDetailModel.setOrderId(orderInf.getOrderId());
            orderDoDetailModel.setDoTime(currTime);
            orderDoDetailModel.setDoUserid("System");
            orderDoDetailModel.setUserType("0");
            orderDoDetailModel.setStatusId(orderInf.getCurStatusId());
            orderDoDetailModel.setStatusNm(orderInf.getCurStatusNm());
            orderDoDetailModel.setMsgContent("");
            orderDoDetailModel.setDoDesc("积分支付");
            orderDoDetailModel.setRuleId("");
            orderDoDetailModel.setRuleNm("");
            orderDoDetailModel.setCreateOper(orderInf.getCreateOper());
            orderDoDetailModel.setDelFlag(0);
            orderDoDetailModelList.add(orderDoDetailModel);
        }
        return orderDoDetailModelList;
    }
}

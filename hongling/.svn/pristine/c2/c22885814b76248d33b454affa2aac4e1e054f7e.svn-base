package centling.business;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import centling.dto.DiscountDto;
import centling.entity.Discount;
import chinsoft.core.DataAccessObject;
import chinsoft.core.LogPrinter;
import chinsoft.core.Utility;

public class BlDiscountManager {
	DataAccessObject dao = new DataAccessObject();
	
	public BlDiscountManager(){
	}
	
	/**
	 * 
	 * @param discountDate 折扣返款进行时间
	 * @return 执行结果  0:成功 1：失败
	 */
	@SuppressWarnings({ "deprecation", "static-access" })
	public int autoGenerateDiscount(String strFromDate, String strToDate) {
		int retValue = 0;
		
		// 调用存储过程，折扣返款
		String proc = "{call BL_PROC_AUTODISCOUNT(?,?,?)}";
		
		try {
			Connection conn = dao.openSession().connection();
			CallableStatement stmt = conn.prepareCall(proc); 
			stmt.setString(1, strFromDate);
			stmt.setString(2, strToDate);
			stmt.registerOutParameter(3, Types.INTEGER);
			stmt.executeUpdate();
			conn.commit();
		} catch(Exception e) {
			retValue = 2;
			LogPrinter.error(e.getMessage());
		} finally {
			dao.closeSession();
		}
		return retValue;
	}
	
	// 添加&修改
	public void saveDiscount(Discount discount) {
		dao.saveOrUpdate(discount);
	}
	
	// 根据ID查询
	public Discount getDiscountByID(String strDiscountID) {
		Discount discount=(Discount)dao.getEntityByID(Discount.class, strDiscountID);
		return discount;
	}
	
	public void removeDiscountByID(Session session ,String strDiscountID) {
		dao.remove(session, Discount.class, strDiscountID);
	}
	
	// 根据ID查询
	@SuppressWarnings("unchecked")
	public List<Discount> getDiscountsByMemberID(String strMemberID) {
		List<Discount> discounts = new ArrayList<Discount>();
		String strChange = "select d from Discount d where d.MemberId=:memberId";
		Query query = DataAccessObject.openSession().createQuery(strChange);
		query.setString("memberId", strMemberID);
		discounts = (List<Discount>)query.list();
		return discounts;
	}
	
	@SuppressWarnings("unchecked")
	public List<DiscountDto> getDiscounts(int nPageIndex, int nPageSize, String blmemberid, String blKeyword)
    {
		List<DiscountDto> list= new ArrayList<DiscountDto>();
    	try {
    		String strChange = "d.ID as did,m.ID as mid,m.Username as musername,di.ID as diid,di.Name as diname,d.FromNum as dfromnum,d.ToNum as dtonum,d.DiscountNum as ddiscountnum,d.Memo as dmemo";
	    	Query query = getDiscountsQuery(strChange, blmemberid, blKeyword);
			query.setFirstResult(nPageIndex * nPageSize);
			query.setMaxResults(nPageSize);
			List<Object[]> list1=query.list();
			for(Object[] o: list1){
				DiscountDto dto = new DiscountDto(
						o[0].toString().trim(),
						o[1].toString().trim(),
						o[2].toString().trim(),
						Integer.valueOf(o[3].toString().trim()),
						o[4].toString().trim(),
						Integer.valueOf(o[5].toString().trim()),
						Integer.valueOf(o[6].toString().trim()),
						Integer.valueOf(o[7].toString().trim()),
						o[8]==null?"":o[8].toString().trim()
						);
				list.add(dto);
			}
    	} catch (Exception e) {
			LogPrinter.error(e.getMessage());
		}finally{
			DataAccessObject.closeSession();
		}
    	return list;
    }
	
	public long getDiscountsCount(String blmemberid, String blKeyword)
    {
		long count = 0;
    	try {
    		Query query = getDiscountsQuery("COUNT(*)", blmemberid, blKeyword);
			count=Utility.toSafeLong(query.uniqueResult());
    	} catch (Exception e) {
			LogPrinter.error(e.getMessage());
		}finally{
			DataAccessObject.closeSession();
		}
    	return count;
    }

	public void removeDiscountByID(String strDiscountID) {
		dao.remove(Discount.class, strDiscountID);
	}
	
	private Query getDiscountsQuery(String strChange,String blmemberid, String blKeyword) {
		StringBuffer sb = new StringBuffer();
		sb.append("select " + strChange + " ");
		sb.append("from Discount d left join Member m ");
		sb.append("                on d.MemberId=m.ID ");
		sb.append("                left join Dict di ");
		sb.append("                on d.DisClothingId=di.ID ");
		sb.append("where 1=1 ");
		if (blmemberid!=null && !"".equals(blmemberid)){
			sb.append("        and m.ID=:memberid ");
		}
		if (blKeyword!=null && !"".equals(blKeyword)){
			sb.append("        and (upper(m.Name) like upper(:keyword) ");
			sb.append("             or upper(di.Name) like upper(:keyword) ");
			sb.append("             or upper(d.FromNum) like upper(:keyword) ");
			sb.append("             or upper(d.ToNum) like upper(:keyword) ");
			sb.append("             or upper(d.DiscountNum) like upper(:keyword) ");
			sb.append("             or upper(d.Memo) like upper(:keyword)) ");
		}
		sb.append("order by d.ID asc ");
		Query query = DataAccessObject.openSession().createSQLQuery(sb.toString());
		if (blmemberid!=null && !"".equals(blmemberid)){
			query.setString("memberid", blmemberid);
		}
		if (blKeyword!=null && !"".equals(blKeyword)){
			query.setString("keyword", "%" + blKeyword + "%");
		}
		return query;
	}
}

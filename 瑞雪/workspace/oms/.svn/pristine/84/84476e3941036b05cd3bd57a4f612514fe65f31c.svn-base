package cn.rkylin.oms.system.facade.impl;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;

import cn.rkylin.oms.common.context.CurrentUser;
import cn.rkylin.oms.system.config.OrgnizationConfig;
import cn.rkylin.oms.system.facade.IOrganizationFacade;
import cn.rkylin.oms.system.facade.exception.OrgFacadeException;
import cn.rkylin.oms.system.unit.domain.WF_ORG_UNIT;
import cn.rkylin.oms.system.unit.service.IUnitService;
import cn.rkylin.oms.system.user.domain.WF_ORG_USER;
import cn.rkylin.oms.system.user.service.IUserService;
import sun.misc.BASE64Encoder;

/**
 * brief description
 * <p>
 * Date : 2010/05/13
 * </p>
 * <p>
 * Module : 组织机构权限管理接口
 * </p>
 * <p>
 * Description: 组织接口外观实现
 * </p>
 * <p>
 * Remark :
 * </p>
 * 
 * @author 王潇艺
 * @version
 *          <p>
 *          ------------------------------------------------------------
 *          </p>
 *          <p>
 *          修改历史
 *          </p>
 *          <p>
 *          序号 日期 修改人 修改原因
 *          </p>
 *          <p>
 *          1
 *          </p>
 */
public class OrganizationFacadeImpl implements IOrganizationFacade {

	/**
	 * 用户业务对象
	 */
	@Autowired
	private IUserService userService;
	
	/**
	 * 组织单元业务对象
	 */
	@Autowired
	private IUnitService unitService;

	/**
	 * 构造函数
	 */
	public OrganizationFacadeImpl() {

	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 根据帐户和密码获取CurrentUser，密码可以是已经加密的，也可以是未加密的。加密使用MD5 算法
	 * </p>
	 * <p>
	 * 备注: 详见顺序图
	 * </p>
	 * 
	 * @param account
	 *            - 帐户（不可为空）
	 * @param password
	 *            - 密码（不可为空）
	 * @param pwdEncrypted
	 *            - 密码是否已经加密
	 * @param needUserUnits
	 *            - 是否需要用户的组织信息
	 * @param needUserStations
	 *            - 是否需要用户的岗位信息
	 * @param needUserRoles
	 *            - 是否需要用户的角色信息
	 * @return 如果用户存在返回CurrentUser，如果用户不存在返回null
	 * @throws OrgFacadeException
	 */
	public CurrentUser getCurrentUser(String account, String password, boolean pwdEncrypted, boolean needUserUnits,
			boolean needUserStations, boolean needUserRoles, boolean needUserExtInfo) throws OrgFacadeException {
		// 帐户和密码不可为空
		if (account == null || account.equals(""))
			throw new OrgFacadeException("参数account不可为空");
		WF_ORG_USER userParam = new WF_ORG_USER();
		userParam.setUserAccount(account);
		return this.getCurrentUserByCondition(password, pwdEncrypted, needUserUnits, needUserStations, needUserRoles,
				needUserExtInfo, userParam);
	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 根据帐户获取CurrentUser，仅用户信息，没有组织、岗位 、角色信息
	 * </p>
	 * <p>
	 * 备注: 详见顺序图
	 * </p>
	 * 
	 * @param account
	 *            - 帐户
	 * @return 用户Bean
	 * @throws OrgFacadeException
	 */
	public CurrentUser getCurrentUser(String account) throws OrgFacadeException {
		CurrentUser currentUser = null;
		currentUser = getCurrentUser(account, null, false, true, true, true, true);
		return currentUser;
	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 根据帐户获取CurrentUser，仅用户信息，没有组织、岗位 、角色信息
	 * </p>
	 * <p>
	 * 备注: 详见顺序图
	 * </p>
	 * 
	 * @param account
	 *            - 帐户
	 * @return 用户Bean
	 * @throws OrgFacadeException
	 */
	public CurrentUser getCurrentUserById(String id) throws OrgFacadeException {
		CurrentUser currentUser = null;
		currentUser = getCurrentUserById(id, null, false, true, true, true, true);
		return currentUser;
	}

	/**
	 * 创建组织单元
	 * 
	 * @param orgUnit
	 *            不能为空字段：UNIT_ID，PARENT_UNIT_ID, UNIT_NAME
	 * @throws OrgFacadeException
	 */
	public void createOrgUnit(WF_ORG_UNIT orgUnit) throws OrgFacadeException {
		// unitService不可为空
		if (unitService == null)
			throw new OrgFacadeException("OrganizationFacade没有被正确初始化");
		/*
		 * BizTypeDefine bizTypeDefine = OrgnizationConfig
		 * .getBizTypeDefine("unit"); ArrayList list =
		 * bizTypeDefine.getElementList(); String idColumnName = ""; for (int i
		 * = 0; i < list.size(); i++) { ElementDefine ed = (ElementDefine)
		 * list.get(i); if (ed.getName().equalsIgnoreCase("id")) { idColumnName
		 * = ed.getColumn(); break; } }
		 */

		try {
			unitService.saveUnit(orgUnit, "0", null, null);// bizTypeDefine.getTable(),
															// idColumnName);
		} catch (DataAccessException dae) {
			dae.printStackTrace();
			throw new OrgFacadeException("数据库操作错误");
		} catch (Exception e) {
			e.printStackTrace();
			throw new OrgFacadeException("未知错误");
		}
	}

	/**
	 * 更新组织单元
	 * 
	 * @param orgUnit
	 * @throws OrgFacadeException
	 */
	public void updateOrgUnit(WF_ORG_UNIT orgUnit) throws OrgFacadeException {
		// unitService不可为空
		if (unitService == null)
			throw new OrgFacadeException("OrganizationFacade没有被正确初始化");

		try {
			unitService.saveUnit(orgUnit, "1", null, null);
		} catch (DataAccessException dae) {
			dae.printStackTrace();
			throw new OrgFacadeException("数据库操作错误");
		} catch (Exception e) {
			e.printStackTrace();
			throw new OrgFacadeException("未知错误");
		}
	}

	/**
	 * 删除组织单元
	 * 
	 * @param orgUnit
	 * @throws OrgFacadeException
	 */
	public void deleteOrgUnit(WF_ORG_UNIT orgUnit) throws OrgFacadeException {
		// unitService不可为空
		if (unitService == null)
			throw new OrgFacadeException("OrganizationFacade没有被正确初始化");

//		BizTypeDefine bizTypeDefine = OrgnizationConfig.getBizTypeDefine("unit");
//		ArrayList list = bizTypeDefine.getElementList();
//		String idColumnName = "";
//		for (int i = 0; i < list.size(); i++) {
//			ElementDefine ed = (ElementDefine) list.get(i);
//			if (ed.getName().equalsIgnoreCase("id")) {
//				idColumnName = ed.getColumn();
//				break;
//			}
//		}

		try {
			unitService.deleteUnit(orgUnit.getUnitId(), null, null, true);
		} catch (DataAccessException dae) {
			dae.printStackTrace();
			throw new OrgFacadeException("数据库操作错误");
		} catch (Exception e) {
			e.printStackTrace();
			throw new OrgFacadeException("未知错误");
		}

	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 把输入的字符串进行md5加密
	 * </p>
	 * <p>
	 * 备注: 详见顺序图
	 * </p>
	 * 
	 * @param strPassword
	 *            - 未加密的密码
	 * @param strALGORITHM
	 *            - 加密算法
	 * @return 使用md5加密后的密码
	 * @throws Exception
	 */
	private String md5Encrypt(String strPassword, String strALGORITHM) {
		MessageDigest messagedigest = null;
		try {
			messagedigest = MessageDigest.getInstance(strALGORITHM);
		} catch (NoSuchAlgorithmException nosuchalgorithmexception) {
			nosuchalgorithmexception.printStackTrace();
		}
		messagedigest.reset();
		byte abyte0[] = strPassword.getBytes();
		byte abyte1[] = messagedigest.digest(abyte0);
		BASE64Encoder base64encoder = new BASE64Encoder();
		return base64encoder.encode(abyte1);
	}

	public void setIUserService(IUserService userService) {
		this.userService = userService;
	}

	public IUserService getIUserService() {
		return userService;
	}

	public void setIUnitService(IUnitService unitService) {
		this.unitService = unitService;
	}

	public IUnitService getIUnitService() {
		return unitService;
	}

	@Override
	public CurrentUser getCurrentUserById(String Id, String password, boolean pwdEncrypted, boolean needUserUnits,
			boolean needUserStations, boolean needUserRoles, boolean needUserExtInfo) throws OrgFacadeException {

		// 帐户和密码不可为空
		if (Id == null || Id.equals(""))
			throw new OrgFacadeException("参数account不可为空");
		WF_ORG_USER userParam = new WF_ORG_USER();
		userParam.setUserId(Id);
		return this.getCurrentUserByCondition(password, pwdEncrypted, needUserUnits, needUserStations, needUserRoles,
				needUserExtInfo, userParam);
	}

	private CurrentUser getCurrentUserByCondition(String password, boolean pwdEncrypted, boolean needUserUnits,
			boolean needUserStations, boolean needUserRoles, boolean needUserExtInfo, WF_ORG_USER userParam)
			throws OrgFacadeException {
		// userService不可为空
		if (userService == null)
			throw new OrgFacadeException("OrganizationFacade没有被正确初始化");

		String strPassword = ((password != null && pwdEncrypted) || password == null) ? password
				: md5Encrypt(password, OrgnizationConfig.CRYPTOGRAM_ALGORITHM);
		CurrentUser currentUser = null;
		try {

			userParam.setUserPassword(strPassword);
			List userList = new ArrayList();
			//userService.getUserByCondition(userParam, needUserUnits, true, needUserRoles,
			//		needUserExtInfo);
			if (userList == null || userList.size() <= 0) {
				currentUser = null;
			} else {
				// WF_ORG_USER jtUser = userService
				// .getUserDetail(((WF_ORG_USER) (userList.get(0)))
				// .getUserId());
				WF_ORG_USER jtUser = (WF_ORG_USER) userList.get(0);
				if (jtUser != null) {
					currentUser = new CurrentUser();
					currentUser.setUserId(jtUser.getUserId());
//					currentUser.setUserAccount(jtUser.getUserAccount());
//					currentUser.setCreatedDate(jtUser.getUserAccountCreated());
//					currentUser.setDescription(jtUser.getUserDescription());
//					boolean isEnabled = false;
//					if (jtUser.getUserAccountEnabled() != null && jtUser.getUserAccountEnabled() != "")
//						isEnabled = jtUser.getUserAccountEnabled() == "0" ? false : true;
//					currentUser.setEnabled(isEnabled);
//					currentUser.setExtendedInfo(jtUser.getExtInfoMap());
					currentUser.setUserName(jtUser.getUserFullname());
//					boolean isLocked = true;
//					if (jtUser.getUserAccountLocked() != null && jtUser.getUserAccountLocked() != "")
//						isLocked = jtUser.getUserAccountLocked().equals("是") ? true : false;
//					currentUser.setLocked(isLocked);
//					currentUser.setPassword(jtUser.getUserPassword());
//					currentUser.setPwdChangeDate(jtUser.getUserPasswordChanged());
//					currentUser.setRoleList(jtUser.getUserRoleList());
//					currentUser.setStationList(jtUser.getStationList());
//					currentUser.setUnitList(jtUser.getUserUnitList());
				}
			}
		} catch (DataAccessException dae) {
			dae.printStackTrace();
			throw new OrgFacadeException("数据库操作错误");
		} catch (Exception e) {
			e.printStackTrace();
			throw new OrgFacadeException("未知错误");
		}
		return currentUser;
	}
}
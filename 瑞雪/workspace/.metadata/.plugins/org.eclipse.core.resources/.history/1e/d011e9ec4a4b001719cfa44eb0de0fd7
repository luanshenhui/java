package cn.rkylin.oms.system.logistics.controller;

import java.net.URLDecoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;

import cn.rkylin.core.controller.ApolloController;
import cn.rkylin.oms.system.storage.dao.StorDAOImpl;
import cn.rkylin.oms.system.storage.domain.OMS_STOR;
import cn.rkylin.oms.system.storage.service.IStorService;
import cn.rkylin.oms.system.storage.vo.StorVO;
/**
 * 仓库管理层
 */
@Controller
@RequestMapping("/stor")
public class LogisticsController extends ApolloController {
	private static final Log logger = LogFactory.getLog(LogisticsController.class);
	// 常量定义
	private static final String PAGE_SELECT_STATEMENT = "pageSelectShop"; // 分页语句Statement名称
	private static final String GOTO_STOR_LIST = "/system/organization/storage/StorList"; // 跳转到店铺列表页

	/**
	 * 仓库服务层
	 */
	@Autowired
	private IStorService storService;

	/**
	 * 构造函数
	 */
	public LogisticsController() {

	}

	/**
	 * 跳转到仓库列表
	 */
	@RequestMapping(value = "/gotoStorList")
	public String gotoRoleList() {
		return GOTO_STOR_LIST;
	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 根据查询条件获取仓库
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @throws 无
	 */
	@ResponseBody
	@RequestMapping(value = "/storList", method = RequestMethod.GET)
	public Map<String, Object> getStorList(String quickSearch, StorVO stor, String formJson,
			@RequestParam(required = false, defaultValue = "0") int start,
			@RequestParam(required = false, defaultValue = "10") int length) throws Exception {
		// 用于返回值的json对象
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			// 前台搜索条件，此处只有一个角色名称
			StorVO param = new StorVO();
			if (quickSearch != null) {
				quickSearch = URLDecoder.decode(quickSearch, "UTF-8");
				if (StringUtils.isNotEmpty(quickSearch)) {
					param.setSearchCondition(quickSearch);
				}
			} else {
				// 高级查询检索条件
				formJson = URLDecoder.decode(formJson, "UTF-8");
				OMS_STOR storVO = JSONObject.parseObject(formJson, OMS_STOR.class);
				
				if (storVO != null) {
					if (StringUtils.isNotEmpty(storVO.getStorName())) {
						param.setStorName(storVO.getStorName());
					}
					if (StringUtils.isNotEmpty(storVO.getStorCode())) {
						param.setStorCode(storVO.getStorCode());
					}
					if (StringUtils.isNotEmpty(storVO.getPrjName())) {
						param.setPrjName(storVO.getPrjName());
					}
				}
				
			}
			// 处理分页
			if (length == -1) {
				length = Integer.MAX_VALUE;
			}
			int page = start / length + 1;
			// 处理转义的字段
			Map<String, String> replaceFieldsMap = new HashMap<String, String>();
			replaceFieldsMap.put("validateStatus", "validate");
			replaceFieldsMap.put("status", "enable");
			// 排序语句生成
			String orderStatement = getOrderString(StorDAOImpl.class.getName(), PAGE_SELECT_STATEMENT,
					replaceFieldsMap);
			if (StringUtils.isNotEmpty(orderStatement)) {
				param.setOrderBy(orderStatement);
			}
			// 获取分页数据
			PageInfo<StorVO> storVOList = storService.findByWhere(page, length, param);
			// 设置返回结果内容
			returnMap.put(JSON_RESULT, SUCCESS);
			returnMap.put(RECORDS_FILTERED, storVOList.getTotal());
			returnMap.put(RECORDS_TOTAL, storVOList.getTotal());
			returnMap.put(RETURN_DATA, storVOList.getList());
			
		} catch (Exception ex) {
			logger.error(ex);
			returnMap.put(JSON_RESULT, FAILED);
			returnMap.put(JSON_MSG, ex.getMessage());
		}
		// 生成返回结果json串，null内容也需要返回
		return returnMap;
	}
	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 删除仓库
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/deleteStor")
	public Map<String, Object> deleteStor(String storIds) throws Exception {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			if (storIds.substring(0, 1).equals(",")){
				storIds = storIds.substring(1);
			}
			if (storIds.substring(storIds.length() - 1, storIds.length()).equals(",")){
				storIds = storIds.substring(storIds.length() - 1);
			}
			storService.delete(storIds);
			returnMap.put(JSON_RESULT, SUCCESS);
		} catch (Exception ex) {
			logger.error(ex);
			returnMap.put(JSON_RESULT, FAILED);
			returnMap.put(JSON_MSG, ex.getMessage());
		}
		return returnMap;
	}
	
	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 添加仓库
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/addStor")
	public Map<String, Object> addStor(@RequestBody StorVO storVO) throws Exception {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			StorVO storVO2 = new StorVO();
			storVO2.setStorName(storVO.getStorName());
			List<StorVO> storVOList = storService.getStorByCondition(storVO2);
			if(storVOList.size()>= 1){
				returnMap.put(JSON_RESULT, FAILED);
				returnMap.put(JSON_MSG, "该仓库名称已存在");
				return returnMap;
			}
			StorVO storVO3 = new StorVO();
			storVO3.setStorCode(storVO.getStorCode());
			List<StorVO> storVOList2 = storService.getStorByCondition(storVO3);
			if(storVOList2.size()>= 1){
				returnMap.put(JSON_RESULT, FAILED);
				returnMap.put(JSON_MSG, "该仓库编码已存在");
				return returnMap;
			}
			storVO.setDeleted("n");
			storVO.setStorId(java.util.UUID.randomUUID().toString().replaceAll("-", ""));
			storService.insert(storVO);
			returnMap.put(JSON_RESULT, SUCCESS);
		}catch (Exception ex) {

			returnMap.put(JSON_RESULT, FAILED);
			returnMap.put(JSON_MSG, ex.getMessage());
			System.out.println(ex);
			System.out.println(returnMap);
		}
		return returnMap;
	}
	
	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 修改仓库
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/updateStor")
	public Map<String, Object> updateStor(@RequestBody StorVO storVO) throws Exception {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			String updateStorName = storVO.getStorName();
			String storName = storVO.getUpdateStorName();
			if(!updateStorName.equals(storName)){
				StorVO storVO2 = new StorVO();
				storVO2.setStorName(updateStorName);
				List<StorVO> storVOList = storService.getStorByCondition(storVO2);
				if(storVOList.size()>= 1){
					returnMap.put(JSON_RESULT, FAILED);
					returnMap.put(JSON_MSG, "该仓库名称已存在");
					return returnMap;
				}
				String updateStorCode = storVO.getStorCode();
				String storCode = storVO.getUpdateStorCode();
				StorVO storVO3 = new StorVO();
				storVO3.setStorName(updateStorCode);
				List<StorVO> storVOList2 = storService.getStorByCondition(storVO2);
				if(storVOList2.size()>= 1){
					returnMap.put(JSON_RESULT, FAILED);
					returnMap.put(JSON_MSG, "该仓库编码已存在");
					return returnMap;
				}
			}
			storService.update(storVO);
			returnMap.put(JSON_RESULT, SUCCESS);
		} catch (Exception ex) {
			logger.error(ex);
			returnMap.put(JSON_RESULT, FAILED);
			returnMap.put(JSON_MSG, ex.getMessage());
		}
		return returnMap;
	}
	
	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 获取仓库详细
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/getStorDetail", method = RequestMethod.POST)
	public Map<String, Object> getStorDetail(String storId) {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try{
			OMS_STOR storDetail = storService.selectStorDetail(storId);
			returnMap.put("storDetail", storDetail);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return returnMap;
	}
}

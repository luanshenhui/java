package cn.rkylin.oms.system.menu.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.rkylin.core.controller.ApolloController;
import cn.rkylin.oms.common.context.CurrentUser;
import cn.rkylin.oms.common.context.WebContextFactory;
import cn.rkylin.oms.system.menu.domain.WF_ORG_MENU;
import cn.rkylin.oms.system.menu.service.IMenuService;
@Controller
@RequestMapping("/menu")
public class MenuController extends ApolloController{
	
	@Autowired
	private IMenuService menuService;
	/**
	 * 来自系统环境变量中的菜单分类标识，例如：子系统名作为菜单分类， 可以实现不同的子系统看到的菜单不一样
	 */
	private String menuCategory = null;
	
	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 根据菜单项id获取菜单项下面的所有页面元素，作为树上的子结点
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
	@ResponseBody
	@RequestMapping(value = "/getElementsByMenuItemID", method = RequestMethod.GET)
	public void getElementsByMenuItemID(HttpServletRequest request,
			HttpServletResponse response) {
//		if (SecurityUtil.existUnavailableChar(request, "id,showAllMenu")) {
//			return mapping.findForward("unpermitted-character");
//		}
		if (menuCategory == null) {
			Object obj = request.getSession().getServletContext().getAttribute("APP_NAME");
			menuCategory = (obj == null || obj.toString().equalsIgnoreCase("oms") || obj.toString().equals(""))
					? null : obj.toString();
		}
		String parentMenuCode = request.getParameter("id").toString();
		parentMenuCode = parentMenuCode.substring(0,
				(parentMenuCode.lastIndexOf("@") == -1 ? parentMenuCode.length() : parentMenuCode.lastIndexOf("@")));

		// 判断是否需要显示全部的菜单，不考虑权限问题
		String showAllMenu = request.getParameter("showAllMenu");
		showAllMenu = (showAllMenu == null ? "" : showAllMenu);
		if (showAllMenu.toLowerCase().equals("true")) {
			showAllMenu = "available"; // 显示全部菜单
		} else {
			showAllMenu = "assignable"; // 只显示自己能看到的菜单
		}

		try {
			String userID = null;
			if (showAllMenu.equalsIgnoreCase("available")) {
				userID = "adminUser";
			} else {
//				SecurityUser securityUser = SecurityUserHoder.getCurrentUser();
//				userID = securityUser.getUserBean().getId();
				CurrentUser currentUser = WebContextFactory.getWebContext().getCurrentUser();
				userID = "adminUser";
			}

			// authorityType为null，默认为可分配(assignable)，不为空则自己指定
			List subItem = menuService.getFormElementList(userID, parentMenuCode, showAllMenu, menuCategory);
			String strXml = null;
			if (subItem.size() != 0) {
				strXml = this.parseSubMenus2XMLString(subItem, request.getParameter("id").toString());
				response.setContentType("text/xml");
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write(strXml);
			} else {
				response.setContentType("text/xml");
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write("");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 获取菜单树（所有菜单项）
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
	@ResponseBody
	@RequestMapping(value = "/getMenuTree", method = RequestMethod.GET)
	public void getMenuTree(HttpServletRequest request,
			HttpServletResponse response) {
//		if (SecurityUtil.existUnavailableChar(request, "showAllMenu,expandAll")) {
//			return mapping.findForward("unpermitted-character");
//		}
		if (menuCategory == null) {
			Object obj = request.getSession().getServletContext().getAttribute("APP_NAME");
			menuCategory = (obj == null || obj.toString().equalsIgnoreCase("iFramework") || obj.toString().equals(""))
					? null : obj.toString();
		}
		List list = null;
		// // 判断是否需要显示全部的菜单，不考虑权限问题
		// String showAllMenu = request.getParameter("showAllMenu");
		// showAllMenu = (showAllMenu == null ? "" : showAllMenu);
		// if (showAllMenu.toLowerCase().equals("true")) {
		// showAllMenu = "true"; // 显示全部菜单
		// } else {
		// showAllMenu = "false"; // 只显示自己能看到的菜单
		// }
		String showAllMenu = request.getParameter("showAllMenu");
		showAllMenu = (showAllMenu == null ? "" : showAllMenu);
		if (showAllMenu.toLowerCase().equals("true")) {
			showAllMenu = "available"; // 显示全部菜单
		} else {
			showAllMenu = "assignable"; // 只显示自己能看到的菜单
		}

		// 判断tree是否全部查询的参数。1：全部查询；0：部分查询。
		String expandAll = request.getParameter("expandAll");
		expandAll = (expandAll == null ? "" : expandAll);
		if (expandAll.toLowerCase().equals("true")) {
			expandAll = "1"; // 全部查询
		} else {
			expandAll = "0"; // 部分查询
		}

		try {
			String userID = null;
			if (showAllMenu.equals("true")) {
				userID = "adminUser";
			} else {
//				SecurityUser securityUser = SecurityUserHoder.getCurrentUser();
//				userID = securityUser.getUserBean().getId();
				CurrentUser currentUser = WebContextFactory.getWebContext().getCurrentUser();
				userID = "adminUser";
			}
			list = menuService.getMenuTreeData(userID, expandAll, null, menuCategory, showAllMenu);
			String strStaXml = null;
			// if (list.size() != 0) {
			if (expandAll.equals("1")) {
				strStaXml = this.parseStation2XMLString(list);
			} else {
				strStaXml = this.parseMenus2XMLString(list);
			}
			response.setContentType("text/xml");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(strStaXml);
			// } else {
			// response.getWriter().write("<item/>");
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private String parseStation2XMLString(List wf_org_menu) {
		// 用于存所有的根组织
		List rootStaList = new ArrayList();
		// 用于存所有的子组织
		List subStaList = new ArrayList();
		// 用于存组织树的xml内容
		String StrOrgXML = "";
		// 把根组织和子组织分开
		for (int i = 0; i < wf_org_menu.size(); i++) {
			WF_ORG_MENU menuVO = (WF_ORG_MENU) wf_org_menu.get(i);

			if (menuVO.getParentMenuCode() == null)// .equals("RootMenu@MENU"))
													// //RootMenu菜单根节点id，为死数据
				rootStaList.add(menuVO);
			else {
				if (!menuVO.getParentMenuCode().equals("@MENU"))
					subStaList.add(menuVO);
			}

		}
		// 循环每一个根组织，把它的子组织灌满
		try {
			Document document = DocumentHelper.createDocument();
			Element itemsElementRoot = document.addElement("tree");
			itemsElementRoot.addAttribute("id", "0");
			// 为父节点套一层节点，以便右键新建菜单的时候能建父节点的同级菜单
			Element itemsElement = itemsElementRoot.addElement("item");
			itemsElement.addAttribute("text", "功能菜单");
			itemsElement.addAttribute("id", "RootMenu"); // 最外层写死的节点id:"RootMenu"。
			itemsElement.addAttribute("im0", "WF_ORG_MENU.gif");
			itemsElement.addAttribute("im1", "WF_ORG_MENU.gif");
			itemsElement.addAttribute("im2", "WF_ORG_MENU.gif");
			for (int j = 0; j < rootStaList.size(); j++) {
				WF_ORG_MENU menuVO = (WF_ORG_MENU) rootStaList.get(j);
				Element pageElement = itemsElement.addElement("item");
				pageElement.addAttribute("text", menuVO.getMenuName());
				pageElement.addAttribute("id", menuVO.getMenuCode());
				pageElement.addAttribute("im0", "WF_ORG_MENU.gif");
				pageElement.addAttribute("im1", "WF_ORG_MENU.gif");
				pageElement.addAttribute("im2", "WF_ORG_MENU.gif");
				// 判断是否是按钮，如果是按钮则显示按钮图片
				String temp = menuVO.getMenuCode();
				temp = temp.substring(temp.lastIndexOf("@") + 1, temp.length());
				if (temp.equals("ELEMENT")) {
					pageElement.addAttribute("im0", "WF_ORG_ELEMENT.gif");
					pageElement.addAttribute("im1", "WF_ORG_ELEMENT.gif");
					pageElement.addAttribute("im2", "WF_ORG_ELEMENT.gif");
				} else if (temp.equals("MENU")) {
					pageElement.addAttribute("im0", "WF_ORG_MENU.gif");
					pageElement.addAttribute("im1", "WF_ORG_MENU.gif");
					pageElement.addAttribute("im2", "WF_ORG_MENU.gif");
				} else if (temp.equals("PAGE")) {
					pageElement.addAttribute("im0", "WF_ORG_PAGE.gif");
					pageElement.addAttribute("im1", "WF_ORG_PAGE.gif");
					pageElement.addAttribute("im2", "WF_ORG_PAGE.gif");
				}
				String StrunitId = (String) menuVO.getMenuCode();
				StalistToXML(subStaList, StrunitId, pageElement);
			}
			StrOrgXML = document.asXML();
		} catch (Exception ex) {
			StrOrgXML = "0";
		}
		// System.out.println(StrOrgXML);
		return StrOrgXML;
	}

	private void StalistToXML(List orgList, String unitId, Element itemsElements) throws Exception {
		try {
			for (int i = 0; i < orgList.size(); i++) {
				WF_ORG_MENU menuVO = (WF_ORG_MENU) orgList.get(i);
				if (menuVO.getParentMenuCode().equals(unitId)) {
					Element pageElement = itemsElements.addElement("item");
					pageElement.addAttribute("text", menuVO.getMenuName());
					pageElement.addAttribute("id", menuVO.getMenuCode());
					// 判断是否是按钮，如果是按钮则显示按钮图片
					String temp = menuVO.getMenuCode();
					temp = temp.substring(temp.lastIndexOf("@") + 1, temp.length());
					if (temp.equals("ELEMENT")) {
						pageElement.addAttribute("im0", "WF_ORG_ELEMENT.gif");
						pageElement.addAttribute("im1", "WF_ORG_ELEMENT.gif");
						pageElement.addAttribute("im2", "WF_ORG_ELEMENT.gif");
					} else if (temp.equals("MENU")) {
						pageElement.addAttribute("im0", "WF_ORG_MENU.gif");
						pageElement.addAttribute("im1", "WF_ORG_MENU.gif");
						pageElement.addAttribute("im2", "WF_ORG_MENU.gif");
					} else if (temp.equals("PAGE")) {
						pageElement.addAttribute("im0", "WF_ORG_PAGE.gif");
						pageElement.addAttribute("im1", "WF_ORG_PAGE.gif");
						pageElement.addAttribute("im2", "WF_ORG_PAGE.gif");
					}
					// pageElement.addAttribute("open", "1");
					// pageElement.addAttribute("call", "1");
					// pageElement.addAttribute("select", "1");
					String StrunitId = (String) menuVO.getMenuCode();
					StalistToXML(orgList, StrunitId, pageElement);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

		// 子节点转化成xml
		private String parseSubMenus2XMLString(List menuList, String parentId) {
			// 用于存组织树的xml内容
			String StrOrgXML = "";
			// 循环每一个根组织，把它的子组织灌满
			try {
				Document document = DocumentHelper.createDocument();
				Element itemsElement = document.addElement("tree");
				itemsElement.addAttribute("id", parentId);
				for (int j = 0; j < menuList.size(); j++) {
					WF_ORG_MENU menuVO = (WF_ORG_MENU) menuList.get(j);
					Element pageElement = itemsElement.addElement("item");
					pageElement.addAttribute("text", menuVO.getMenuName());
					pageElement.addAttribute("id", menuVO.getMenuCode());
					// 判断是否是按钮，如果是按钮则显示按钮图片
					String temp = menuVO.getMenuCode();
					temp = temp.substring(temp.lastIndexOf("@") + 1, temp.length());
					if (temp.equals("ELEMENT")) {
						pageElement.addAttribute("im0", "WF_ORG_ELEMENT.gif");
						pageElement.addAttribute("im1", "WF_ORG_ELEMENT.gif");
						pageElement.addAttribute("im2", "WF_ORG_ELEMENT.gif");
					} else if (temp.equals("MENU")) {
						pageElement.addAttribute("im0", "WF_ORG_MENU.gif");
						pageElement.addAttribute("im1", "WF_ORG_MENU.gif");
						pageElement.addAttribute("im2", "WF_ORG_MENU.gif");
					} else if (temp.equals("PAGE")) {
						pageElement.addAttribute("im0", "WF_ORG_PAGE.gif");
						pageElement.addAttribute("im1", "WF_ORG_PAGE.gif");
						pageElement.addAttribute("im2", "WF_ORG_PAGE.gif");
					}
					StrOrgXML = document.asXML();
				}
			} catch (Exception ex) {
				StrOrgXML = "0";
			}
			System.out.println(StrOrgXML);
			return StrOrgXML;
		}
		
		/**
		 * 方法简要描述信息.
		 * <p>
		 * 描述: 把菜单列表中的数据转换成为xml字符串用于前台显示菜单树
		 * </p>
		 * <p>
		 * 备注: 详见顺序图
		 * </p>
		 * 
		 * @param menuList
		 *            - 菜单列表
		 * @return 菜单树xml字符串
		 * @throws Exception
		 */
		private String parseMenus2XMLString(List menuList) {
			List rootStaList = new ArrayList();
			// 用于存组织树的xml内容
			String StrOrgXML = "";
			// 把根组织和子组织分开
			for (int i = 0; i < menuList.size(); i++) {
				WF_ORG_MENU menuVO = (WF_ORG_MENU) menuList.get(i);
				if (menuVO.getParentMenuCode() == null)
					rootStaList.add(menuVO);
			}
			// 循环每一个根组织，把它的子组织灌满
			try {
				Document document = DocumentHelper.createDocument();
				Element itemsElementRoot = document.addElement("tree");
				itemsElementRoot.addAttribute("id", "0");
				// 为父节点套一层节点，以便右键新建菜单的时候能建父节点的同级菜单
				Element itemsElement = itemsElementRoot.addElement("item");
				itemsElement.addAttribute("text", "功能菜单");
				itemsElement.addAttribute("id", "RootMenu"); // 最外层写死的节点id:"RootMenu"。
				itemsElement.addAttribute("im0", "WF_ORG_MENU.gif");
				itemsElement.addAttribute("im1", "WF_ORG_MENU.gif");
				itemsElement.addAttribute("im2", "WF_ORG_MENU.gif");
				itemsElement.addAttribute("select", "1"); // 设置节点为选中,否则需要选中一个节点双击展开图标才会发起子节点请求
				for (int j = 0; j < rootStaList.size(); j++) {
					WF_ORG_MENU menuVO = (WF_ORG_MENU) rootStaList.get(j);
					Element pageElement = itemsElement.addElement("item");
					pageElement.addAttribute("text", menuVO.getMenuName());
					pageElement.addAttribute("id", menuVO.getMenuCode());
					pageElement.addAttribute("im0", "WF_ORG_MENU.gif");
					pageElement.addAttribute("im1", "WF_ORG_MENU.gif");
					pageElement.addAttribute("im2", "WF_ORG_MENU.gif");
				}
				StrOrgXML = document.asXML();
			} catch (Exception ex) {
				StrOrgXML = "0";
			}
			System.out.println(StrOrgXML);
			return StrOrgXML;
		}
	
}
package cn.rkylin.oms.system.unit.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.rkylin.core.controller.ApolloController;
import cn.rkylin.oms.common.context.CurrentUser;
import cn.rkylin.oms.common.context.WebContextFactory;
import cn.rkylin.oms.system.unit.service.IUnitService;

/**
 * brief description
 * <p>
 * Date : 2010/05/05
 * </p>
 * <p>
 * Module : 组织单元管理
 * </p>
 * <p>
 * Description : 组织单元管理Action类
 * </p>
 * <p>
 * Remark :
 * </p>
 * 
 * @author 王潇艺
 * @version
 *          <p>
 * 			------------------------------------------------------------
 *          </p>
 *          <p>
 *          修改历史
 *          </p>
 *          <p>
 *          序号 日期 修改人 修改原因
 *          </p>
 *          <p>
 *          1
 *          </p>
 */
@Controller
@RequestMapping("/unit")
public class UnitController extends ApolloController {
	  private static final Log logger = LogFactory.getLog(UnitController.class);
	/**
	 * 组织单元业务对象
	 */
	@Autowired
	private IUnitService unitService;

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 根据当前用户的角色，获取组织机构树（只取根结点）
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 * 
	 */
	@ResponseBody
	@RequestMapping(value = "/getUnitTree", method = RequestMethod.GET)
	public Map<String, Object> getUnitTree(String shopId) throws Exception {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			CurrentUser currentUser = WebContextFactory.getWebContext().getCurrentUser();
			List unitTree = unitService.getRootUnit(currentUser.getUserId());
			if (unitTree != null) {
				returnMap.put(JSON_RESULT, SUCCESS);
				returnMap.put(RETURN_DATA, unitTree);
			} else {
				returnMap.put(JSON_RESULT, FAILED);
				returnMap.put(JSON_MSG, "组织不存在");
			}
		} catch (Exception ex) {
			logger.error(ex);
			returnMap.put(JSON_RESULT, FAILED);
			returnMap.put(JSON_MSG, ex.getMessage());
		}
		return returnMap;
	}

	/**
	 * 查询权限
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 */
/*	public ActionForward getUnitTreeManageable(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		List unitTree;
		try {
			SecurityUser securityUser = SecurityUserHoder.getCurrentUser();
			unitTree = unitBO.getRootUnit(securityUser.getUserBean().getId());
			if (unitTree.size() > 0) {
				JSONArray json = JSONArray.fromObject(unitTree);
				String srt = json.toString();
				response.setContentType("text/json");
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write(srt);
			}
		} catch (ServiceException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}*/

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 把组织单元列表中的数据转换成为xml字符串用于前台显示组织机构树
	 * </p>
	 * <p>
	 * 备注: 详见顺序图
	 * </p>
	 * 
	 * @param wf_org_tree_v
	 *            - 组织机构树
	 * @return 组织机构树xml字符串
	 * @throws Exception
	 */
	private String parseUnit2XMLString(List wf_org_tree_v) {

		// WF_ORG_UNIT unitVO = (WF_ORG_UNIT) wf_org_tree_v.get(0);
		// String unitid = unitVO.getUnitId();
		// String unitname = unitVO.getUnitName();
		// 用于存所有的根组织
		List rootOrgList = new ArrayList();
		// 用于存所有的子组织
		List subOrgList = new ArrayList();
		// 用于存组织树的xml内容
		String StrOrgXML = "";
		// 把根组织和子组织分开
		for (int i = 0; i < wf_org_tree_v.size(); i++) {
			HashMap map = (HashMap) wf_org_tree_v.get(i);
			if (map.get("PARENT_UNIT_ID") == null)
				rootOrgList.add(map);
			else
				subOrgList.add(map);
		}
		// 循环每一个根组织，把它的子组织灌满
		try {
			Document document = DocumentHelper.createDocument();
			Element itemsElement = document.addElement("tree");
			itemsElement.addAttribute("id", "0");
			for (int j = 0; j < rootOrgList.size(); j++) {
				HashMap map = (HashMap) rootOrgList.get(j);
				Element rootElement = itemsElement.addElement("item");
				rootElement.addAttribute("text", (String) map.get("UNIT_NAME"));
				rootElement.addAttribute("id", (String) map.get("UNIT_ID"));
				// pageElement.addAttribute("open", "1");
				rootElement.addAttribute("im0", "WF_ORG_UNIT.gif");
				rootElement.addAttribute("im1", "WF_ORG_UNIT.gif");
				rootElement.addAttribute("im2", "WF_ORG_UNIT.gif");
				// pageElement.addAttribute("call", "1");
				rootElement.addAttribute("select", "1"); // 设置节点为选中,否则需要选中一个节点双击展开图标才会发起子节点请求
				String StrunitId = (String) map.get("UNIT_ID");
				OrglistToXML(subOrgList, StrunitId, rootElement);
				StrOrgXML = document.asXML();
			}
		} catch (Exception ex) {
			StrOrgXML = "0";
		}
		return StrOrgXML;
	}

	/*
	 * 根据传入的parentid，找它下面的所有子结点 递推，一直找下去，直到子结点不再有子结点，方法开始递归
	 * 
	 * @param orgList - 完整的“子结点列表”
	 * 
	 * @param unitId - 父结点id
	 * 
	 * @param itemsElements - 父结点element对象
	 */
	private void OrglistToXML(List orgList, String unitId, Element itemsElements) throws Exception {
		try {
			for (int i = 0; i < orgList.size(); i++) {
				HashMap map = (HashMap) orgList.get(i);
				if (map.get("PARENT_UNIT_ID").equals(unitId)) {
					Element pageElement = itemsElements.addElement("item");
					pageElement.addAttribute("text", (String) map.get("UNIT_NAME"));
					pageElement.addAttribute("id", (String) map.get("UNIT_ID"));
					pageElement.addAttribute("im0", "WF_ORG_UNIT.gif");
					pageElement.addAttribute("im1", "WF_ORG_UNIT.gif");
					pageElement.addAttribute("im2", "WF_ORG_UNIT.gif");
					String StrunitId = (String) map.get("UNIT_ID");
					OrglistToXML(orgList, StrunitId, pageElement);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 获取组织单元下面的子组织单元，用于组织树动态加载
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
	/*public ActionForward getSubUnitTree(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		try {
			if (SecurityUtil.existUnavailableChar(request, "id,needStation")) {
				return mapping.findForward("unpermitted-character");
			}

			String parentNodeIDOld = request.getParameter("id").toString();
			String itemId = parentNodeIDOld.substring(0, parentNodeIDOld.lastIndexOf("@"));
			boolean needStation = (request.getParameter("needStation") == null
					|| request.getParameter("needStation").equals("")) ? false : true;

			SecurityUser securityUser = SecurityUserHoder.getCurrentUser();
			String userID = securityUser.getUserBean().getId();
			List subItem = unitBO.getSubUnit(userID, itemId, needStation, false);

			String strXml = null;
			if (subItem.size() != 0) {
				strXml = this.parseSubUnit2XMLString(subItem, null);
				response.setContentType("text/xml");
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write(strXml);
			} else {
				response.setContentType("text/xml");
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write("");
				// Document document = DocumentHelper.createDocument();
				// response.getWriter().write(document.asXML());
			}
		} catch (ServiceException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}*/

	/*public ActionForward getSubUnitTreeManageable(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		try {
			if (SecurityUtil.existUnavailableChar(request, "id,needStation")) {
				return mapping.findForward("unpermitted-character");
			}

			String itemId = request.getParameter("id").toString();
			itemId = itemId.substring(0, itemId.lastIndexOf("@"));
			boolean needStation = (request.getParameter("needStation") == null
					|| request.getParameter("needStation").equals("")) ? false : true;
			SecurityUser securityUser = SecurityUserHoder.getCurrentUser();
			String userID = securityUser.getUserBean().getId();
			List subItem = unitBO.getSubUnit(userID, itemId, needStation, true);
			if (subItem.size() > 0) {
				JSONArray json = JSONArray.fromObject(subItem);
				String srt = json.toString();
				response.setContentType("text/json");
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write(srt);
			}
		} catch (ServiceException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}*/

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 把子组织单元数据结点成为xml字符串用于前台显示组织机构树。注意：此方法不需要递归 ，子组织单元下不会包含下层组织单元。
	 * 如果stationList不为空，则需要也转成xml字符串
	 * </p>
	 * <p>
	 * 备注: 详见顺序图
	 * </p>
	 * 
	 * @param subUnitList
	 *            - 子组织机构列表
	 * @param subStationList
	 *            - 子岗位列表
	 * @return 子组织单元结点xml字符串
	 * @throws Exception
	 */
	public String parseSubUnit2XMLString(List subUnitList, List subStationList) {
		Document document = DocumentHelper.createDocument();
		Element itemsElement = document.addElement("tree");
		HashMap map_praId = (HashMap) subUnitList.get(0); // 取父节点
		itemsElement.addAttribute("id", (String) map_praId.get("PARENT_UNIT_ID"));
		String StrOrgXML = "";
		for (int j = 0; j < subUnitList.size(); j++) {
			HashMap map = (HashMap) subUnitList.get(j);
			Element itemElement = itemsElement.addElement("item");
			// 两种可以，一个是画Unit，一个是画Station，先根据名称来判断吧
			// 要根据不同的结点类型，来画图标
			if ((String) map.get("UNIT_NAME") != null) {
				itemElement.addAttribute("text", (String) map.get("UNIT_NAME"));
				itemElement.addAttribute("id", (String) map.get("UNIT_ID"));
				itemElement.addAttribute("im0", "WF_ORG_UNIT.gif");
				itemElement.addAttribute("im1", "WF_ORG_UNIT.gif");
				itemElement.addAttribute("im2", "WF_ORG_UNIT.gif");
			} else {
				itemElement.addAttribute("text", (String) map.get("STATION_NAME"));
				itemElement.addAttribute("id", (String) map.get("STATION_ID"));
				itemElement.addAttribute("im0", "WF_ORG_STATION.gif");
				itemElement.addAttribute("im1", "WF_ORG_STATION.gif");
				itemElement.addAttribute("im2", "WF_ORG_STATION.gif");
			}
			StrOrgXML = document.asXML();
		}
		return StrOrgXML;

	}

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 获取组织机构明细页面需要的组织类型
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
/*	public ActionForward getUnitType(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		if (SecurityUtil.existUnavailableChar(request, "type")) {
			return mapping.findForward("unpermitted-character");
		}

		String type = request.getParameter("type").toString();
		try {
			response.setContentType("text/json");
			response.setCharacterEncoding("UTF-8");
			List unitType = unitBO.getUnitType(type);
			String str = this.listToJson(unitType);

			response.getWriter().write(str);
		} catch (ServiceException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}*/

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 保存组织单元（新建保存、修改保存）。根据saveType来确定是新建保存还是修改保存
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
	/*public ActionForward saveUnit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		if (SecurityUtil.existUnavailableChar(request, "orgName,orgDes,orgSta,orgType,id,userId")) {
			return mapping.findForward("unpermitted-character");
		}

		JSONObject jsonObject = new JSONObject();
		PrintWriter writer = null;
		String unitName = request.getParameter("orgName").toString();
		String unitDescription = request.getParameter("orgDes").toString();
		String stationId = request.getParameter("orgSta").toString();
		String unitType = request.getParameter("orgType").toString();
		String id = request.getParameter("id").toString();
		String saveType = request.getParameter("flag").toString();
		String userId = request.getParameter("userId").toString();
		id = id.substring(0, id.lastIndexOf("@")); // 截取id，使用@分割

		String extInfo = request.getParameter("extInfo"); // 获取扩展信息
		Map map = new HashMap();
		String info[] = extInfo.split("&");
		for (int j = 0; j < info.length; j++) {
			int s = info[j].lastIndexOf("=");
			map.put(info[j].substring(0, s), info[j].substring(s + 1, info[j].length()));
		}

		BizTypeDefine bizTypeDefine = OrgnizationConfig.getBizTypeDefine("unit");
		ArrayList list = bizTypeDefine.getElementList();
		Map finalElementMap = new HashMap();
		String idColumnName = "";
		for (int i = 0; i < list.size(); i++) {
			ElementDefine ed = (ElementDefine) list.get(i);
			Iterator mapIter = map.keySet().iterator();
			if (ed.getName().equalsIgnoreCase("id")) {
				idColumnName = ed.getColumn();
			}
			while (mapIter.hasNext()) {
				String extInfoName = mapIter.next().toString().trim();
				if (extInfoName.equals(ed.getName().trim())) {
					if (ed.getType().equalsIgnoreCase("DateField")) {
						String temp = map.get(extInfoName).toString();
						temp = temp.replaceAll("[+]", " "); // 替换序列话后对空格的编码
						// temp = temp.replaceAll("%3A", ":");
						finalElementMap.put(ed.getColumn(), temp);
					} else {
						finalElementMap.put(ed.getColumn(), map.get(extInfoName));
					}

				}
			}
		}

		// String[] userIdStrArray = null;

		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");

		WF_ORG_UNIT unitVO = new WF_ORG_UNIT();
		unitVO.setExtInfoMap(finalElementMap);// 扩展信息hashMap
		if (!userId.equals("")) {
			if (userId.lastIndexOf(",") != -1) {
				String[] userIdStrArray = userId.split(",");
				unitVO.setUnitUsersArray(userIdStrArray);
			} else {
				String[] userIdStrArray2 = new String[1];
				userIdStrArray2[0] = userId;
				unitVO.setUnitUsersArray(userIdStrArray2);
			}
		}

		unitVO.setUnitName(unitName);
		unitVO.setUnitDescription(unitDescription);
		unitVO.setStationId(stationId.equals("") ? null : stationId);
		unitVO.setUnitType(unitType);
		String uuid = java.util.UUID.randomUUID().toString().replaceAll("-", "");

		if (saveType.equals("0")) {
			unitVO.setParentUnitId(id);
			unitVO.setUnitId(uuid);
		} else if (saveType.equals("1")) {
			// String unitId = request.getParameter(id);
			unitVO.setUnitId(id);
		}

		try {
			writer = response.getWriter();
			unitBO.saveUnit(unitVO, saveType, bizTypeDefine.getTable(), idColumnName);
			// 将为截串的数据返回给页面，将没有@UNIT的字段id添加上@UNIT字符串
			if (saveType.equals("0")) {
				id = request.getParameter("id").toString();
				unitVO.setParentUnitId(id);
				unitVO.setUnitId(uuid + "@UNIT");
			} else if (saveType.equals("1")) {
				id = request.getParameter("id").toString();
				unitVO.setUnitId(id);
			}

			String itemDetail = JSONObject.fromObject(unitVO).toString();
			jsonObject.put("itemDetail", itemDetail);
			// response.setContentType("text/json");
			// response.setCharacterEncoding("UTF-8");
		} catch (ServiceException e) {
			jsonObject.put("errorMessage", e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			jsonObject.put("errorMessage", OrgI18nConsts.EXCEPTION_UNKNOWN);
			e.printStackTrace();
		} finally {
			writer.println(jsonObject.toString());
			writer.flush();
			writer.close();
		}
		return null;
	}*/

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 获取给定组织单元的明细信息
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
	/*public ActionForward getUnitDetail(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		if (SecurityUtil.existUnavailableChar(request, "itemId")) {
			return mapping.findForward("unpermitted-character");
		}

		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		JSONObject jsonObject = new JSONObject();
		String unitID = request.getParameter("itemId").toString();
		unitID = unitID.substring(0, unitID.lastIndexOf("@"));
		try {
			WF_ORG_UNIT unitVO = unitBO.getUnitDetail(unitID);
			if (unitVO != null) {
				// WF_ORG_USER userVO = (WF_ORG_USER)list.get(1);
				unitVO.setUnitId(request.getParameter("itemId").toString());
				String unitDetail = JSONObject.fromObject(unitVO).toString();
				jsonObject.put("unitDetail", unitDetail);
				response.getWriter().println(jsonObject.toString());
			}
		} catch (ServiceException e) {
			jsonObject.put("errorMessage", e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			jsonObject.put("errorMessage", OrgI18nConsts.EXCEPTION_UNKNOWN);
			e.printStackTrace();
		}

		return null;
	}*/

	/**
	 * 获取用户信息
	 */
	/*public ActionForward getUserDetail(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		if (SecurityUtil.existUnavailableChar(request, "itemId,sendflag")) {
			return mapping.findForward("unpermitted-character");
		}

		String unitID = request.getParameter("itemId");
		unitID = unitID.substring(0, unitID.lastIndexOf("@"));
		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		String forward = request.getParameter("forward");
		if (forward == null || forward.equals("")) {
			forward = "userDetail";
		}
		try {
			List userList = unitBO.getUserDetail(unitID);
			request.setAttribute("userDetailList", userList);
		} catch (ServiceException e) {
			request.setAttribute("errorMessage", e.getMessage());
		} catch (Exception e) {
			request.setAttribute("errorMessage", OrgI18nConsts.EXCEPTION_UNKNOWN);
			e.printStackTrace();
		}
		return mapping.findForward(forward);
	}*/

	/*public ActionForward getExtendDetail(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		if (SecurityUtil.existUnavailableChar(request, "type")) {
			return mapping.findForward("unpermitted-character");
		}

		JSONObject jsonObject = new JSONObject();
		String type = request.getParameter("type").toString();
		if (type.equals("unit")) {
			BizTypeDefine bizTypeDefine = OrgnizationConfig.getBizTypeDefine(type);
			jsonObject.put("BizTypeDefine", bizTypeDefine);
			try {
				response.getWriter().println(jsonObject.toString());
			} catch (IOException e) {
				jsonObject.put("errorMessage", OrgI18nConsts.EXCEPTION_UNKNOWN);
				e.printStackTrace();
			}
		}
		return null;
	}*/

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 删除组织单元，如果组织下有角色、岗位、人员，则该组织单元不能被删除
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
	/*public ActionForward deleteUnit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		if (SecurityUtil.existUnavailableChar(request, "itemId")) {
			return mapping.findForward("unpermitted-character");
		}

		JSONObject jsonObject = new JSONObject();
		PrintWriter writer = null;
		// 扩展表的表名
		String extTableName = "";
		// 扩展表的主键字段名
		String idColumnName = "";

		unitBO = (UnitService) getBaseService().getServiceFacade("TP_UnitService");
		String unitID = request.getParameter("itemId");
		unitID = unitID.substring(0, unitID.lastIndexOf("@"));
		try {
			writer = response.getWriter();

			BizTypeDefine bizTypeDefine = OrgnizationConfig.getBizTypeDefine("unit");
			extTableName = bizTypeDefine.getTable();
			if (bizTypeDefine.getElementList() != null || bizTypeDefine.getElementList().size() > 0) {
				for (int j = 0; j < bizTypeDefine.getElementList().size(); j++) {
					ElementDefine ed = (ElementDefine) bizTypeDefine.getElementList().get(j);
					if (ed.getName().equalsIgnoreCase("id")) {
						idColumnName = ed.getColumn();
						break;
					}
				}
			}
			unitBO.deleteUnit(unitID, extTableName, idColumnName, false); // bizTypeDefine.getTable()
			// String str = "success";
		} catch (ServiceException e) {
			jsonObject.put("errorMessage", e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			jsonObject.put("errorMessage", OrgI18nConsts.EXCEPTION_UNKNOWN);
			e.printStackTrace();
		} finally {
			writer.println(jsonObject.toString());
			writer.flush();
			writer.close();
		}
		return null;
	}*/

	/**
	 * 方法简要描述信息.
	 * <p>
	 * 描述: 获取组织单元下面的子组织单元和岗位，用于组织树动态加载
	 * </p>
	 * <p>
	 * 备注: 详见顺序图<br>
	 * </p>
	 * 
	 * @param mapping
	 *            - Struts的ActionMapping对象，包含了请求映射的基本信息。
	 * @param form
	 *            - Struts的ActionForm对象，包含了请求页面要提交的数据(只在配置了FormBean标签时有效)
	 * @param request
	 *            - jsp请求对象
	 * @param response
	 *            - jsp答复对象
	 * @throws 无
	 */
//	public void getSubUnitTreeWithPosition(ActionMapping mapping, ActionForm form, HttpServletRequest request,
//			HttpServletResponse response) {
//
//	}

	/**
	 * @param list
	 *            list对象
	 * @return String
	 */
/*	private String listToJson(List<?> list) {

		// StringBuilder json = new StringBuilder();
		// String jsonStr = "{\"data\":\"";
		String tempStr = null;
		try {
			JSONArray json;
			json = JSONArray.fromObject(list);
			// String tempStr = null;
			tempStr = json.toString().replace('{', '[');
			tempStr = tempStr.replace('}', ']');
			tempStr = tempStr.replaceAll("\\s*['\"]?\\w+['\"]?\\:\\s*", "");
			// jsonStr += tempStr;
			// jsonStr += "\",\"success\":true}";
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return tempStr;
	}*/
}

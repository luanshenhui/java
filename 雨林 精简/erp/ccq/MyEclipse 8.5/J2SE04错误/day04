一异常和异常的处理
      1什么是异常
           程序运行时出现的种种问题，包括可预知和不可预知的。
      2异常是如何产生的
          1编码时思维不够缜密。
          2Java语言的开发者抛出的异常。
          3用户的不友好。
          4系统的不稳定。
      3如何处理异常
           1捕获并且处理，try捕获{可能出现异常的代码..}catch{异常出现时处理的方式..}finally{无论是否出现异常，代码都会执行
           一般用于回收系统资源...}
           2throw，throws抛出异常
           throw：在程序代码中抛出
           throws：在方法签名后抛出，标示该方法内出现的所有异常均布处理，全部抛给上级调用者。
      4常见的异常有哪些？
           1NullPoinException：空指针异常
           2ArryIndexOfBounds：数组下标越界
           3类型转换异常
           4栈溢出异常
           5参数类型不匹配InputMismatchException
           
           抛出和处理本质上的区别在于程序是否继续执行。
      
      
      
      
      
二多线程的应用      
进程：进行中的完整程序，每个进程都会占用一块独立的内存空间，
               在没有允许的情况下，各个进程之间是无法通讯的。
线程：线程是一个进程内，程序运行的基本单元。
多线程： 多个同时执行的顺序程序，利用cpu的轮转让程序中的多段代码”同时“执行。
程序：代码，指令的集合，顺序结构。


如何在java语言中实现多线程。
1实现Runnable接口。覆盖run()方法。
2继成Thread类。覆盖run()方法。

线程的生命周期：
1初始化阶段。init()；
2可执行阶段。不可控。start()；
3执行。执行run()；中的代码。
4阻塞。sleep()；会占用cpu； wait()；会释放cpu，再次启动需要调用start()；
5销毁。cannel()；

线程锁：
用来解决多线程并发访问一个数据时，造成的冲突
1方法锁 /代码锁/ public synchronized void run(){}
       多个线程的对象去访问一个方法，在其中一个线程对象使用完成这个方法之前，其他线程的对象无法使用这个方法
2对象锁    /synchronized(对象){代码}
   在代码执行完成前，会将该对象锁住，禁止其他线程来访问。
3死锁；一直占用资源，不释放。

练习，在图形界面中画个小球，让小球从上到下移动。如果小球碰到了鼠标，则从新的位置落下来，如果小球落下来则抛出异常游戏结束   
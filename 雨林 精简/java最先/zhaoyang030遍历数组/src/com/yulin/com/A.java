package com.yulin.com;

public class A {
//概念；类，抽象类，接口
//思想；封装，继成，多态
//API；应用程序接口，javaSE,JDK
	
//	面向对象思想的封装性
	/*
	 * 1)类将相关的变量和方法封装在类的内部
	 * 2)可见性，4个范围，3个关键字
	 * 3)private;当前类能访问
	 * 4)默认，(什么也不写)：本包的其他类可见
	 * 5)protected：外包的子类也可见
	 * 6)public：都可见
	 * 7)this表示当前类的对象，super表示父类的引用，掉用父类的构造方法，在子类中系统会默认调用父类的父类的无参构造方法，使用super(参数列表)可以调用父类构造方法.
	 * 8)建议每个类中都有无参的构造方法
	 * 9)如果子类中的构造方法入口一致，系统会在最后一个构造方法中调用super().super要写首行
	 * 10)类与抽像类的关系；由于类和抽象类都是类，所以类和抽象类可以相互继承，
	 * 类继承类//不合理
	 * 类继承抽象类//抽象类可能会有抽象方法，类继承就会报错，除非实现抽象方法，或变为抽象类，较长用。
	 * 抽象类继承抽象类//语法没问题还常用点
	 * 抽象类继承类//语法没问题
	 * 使用继承的场合得满足"是一个"的原则。
	 * java中的类都直接或间接的继承Object类，Object类是java的顶级父类。单根继承
	 * java中的类只能同时继承一个父类。只能有一个父类。
	 * 如果定义一个类如果不指定父类，系统会自动让她继承Object类，默认加的不显示。
	 * 
	 */
	protected String name="张三";//1
	protected void m(){
		System.out.println("方法");//2
	}
	public static void main(String[] args) {
		A a=new A();//这两个方法是非静态的得有个对象
		System.out.println(a.name);
		a.m();
	}
}

1、账务账号
	1）基本功能：增加、修改、删除、查询、
		开通、暂停、查看明细。
	2）业务需求：账务账号与客户的身份证
	对应，用于向客户进行计费、收费的。
	而业务账号才是客户开通的unix服务器
	账号，由于允许客户开通多个unix服务器
	账号，因此账务账号和业务账号具有一对多
	的关系，通过账务账号可以把该客户所有
	业务账号的费用收全。
	注意：账务账号不是登陆unix服务器的
		账号，而是对这些登陆账号进行收费
		的账号。
	3）由于新增、修改、删除、开通、暂停、
		查看明细的动作都是由查询页面发起
		的，因此我们先做查询。
	
2、开发步骤（查询）
	1）具体分析当前功能的需求。
		--带搜索条件的组合查询，如何动态拼
		搜索条件是难点
		--其他的部分可以参考资费查询功能
	2）数据库表的结构，判断哪些字段和当前
		开发的功能有关系。
		建表。
	3）基础代码：实体类
	4）分析一下当前的功能需要几次请求：
		--首次访问查询页面发请求
		--点搜索、分页时再次发请求
		由于这两种请求是一回事，都是对数据
		进行查询的，因此可以看成是一次请求，
		写一个Action即可。
	5）根据分析请求的结果，写响应的Action
		--写strutx.xml配置文件，追加Action
		--创建Action类，写业务代码
			a、定义输入、输出
			b、再写业务方法
		--写业务方法时，如果需要调用DAO，
			那么转向去写DAO
	6）写JSP页面
	
	1、状态维护
1）开通
	--暂停状态的数据可以开通
	--当我们插入数据时，设置状态为开通，
	   同时记录创建时间为当前系统时间。
	--每次点开通按钮时，设置状态为开通，
	   同时删除暂停时间。
2）暂停
	--开通状态的数据可以暂停
	--每次点暂停按钮时，设置状态为暂停，
	   同时记录暂停时间为当前系统时间。
	--暂停账务账号，同时暂停其下属的所有
	   业务账号。（暂时不做）
3）删除
	--开通/暂停状态的数据可以删除
	--删除态的数据不能够进行修改、开通、暂停
	--不是真正的物理删除，而是改变数据状态，
	   这是出于数据安全性和可追溯性的考虑。
	--每次点击删除按钮时，设置状态为删除，
	   同时记录删除时间为当前系统时间。
	--删除账务账号时，删除其下属所有的
	   业务账号。（暂时不做）
	   
	   1、增加
	1）页面校验优先级低，有时间最好做一下，
	     没时间不强求。
	2）新增DAO中写一个完整的insert语句，
	     包含所有的必输项和可选项字段，那么
	     对于可选项字段如果用户没输入值的时候，
	     在执行insert语句时会插入一个null值，
	     但这正是我们希望的。
	3）页面文本框的写法，参考资费修改的页面。
	4）DAO中插入方法
	5）页面一些特殊校验
		--可选框中，生日、EMAIL、职业、性别
		等字段不是推荐人的属性，是当前新增
		的账务账号的属性。
		--生日是在输入完当前账务账号的身份证
		后，自动的计算并赋值过来的。
		--推荐人身份证号字段：在输入完之后，
		需要异步的根据此身份证号查询
		account表，看看是否存在对应的推荐
		人，若存在则返回ID值，并将此ID记录
		到页面的隐藏文本框中（name等于
		recommenderId,因为我们保存时
		要存的是这个字段，因此把它传递给
		Action中的输入属性）。若不存在则
		提示该身份证号非法。

2、修改
	1）参考资费修改功能
	2）修改密码时
		--输入完旧密码，发异步请求，传入
		输入的旧密码及ID值，
		判断该密码是否正确。
		select * from account 
		where id=? and login_password=?
		如果上面的sql没返回值，说明旧密码
		错了，在页面给出提示。
		如果返回值，说明旧密码输入对了，
		不用提示了。
		--输入新密码时，校验一下两次输入的
		新密码一致。

3、查看明细
	如果做完了修改账务账号，可以参考
	toUpdateAccount的写法。
	也可以直接参考toUpdateCost的写法。
	区别是显示的页面，没有保存按钮了，
	并且所有的文本框都是只读的，可以通过
	readonly属性来设置。

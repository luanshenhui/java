package com.yulin.snake;

import java.util.Arrays;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Snake {// 属性-------------------------------------
	private int w = 40;
	private int h = 20;
	private int[][] snake = { { 10, 5 }, { 9, 5 }, { 8, 5 }, { 7, 5 },
			{ 6, 5 }, { 5, 5 }, { 5, 4 }, { 5, 3 }, { 4, 3 }, { 3, 3 }, };
	private int dir = 1;// 1;右，-1左，10下，-10上

	int[][] foods = new int[5][2];
	int food = 0;

	public void show() {// 功能---------------------------------
		for (int y = 0; y < h; y++) {
			for (int x = 0; x < w; x++) {
				if (y == 0 || y == h - 1 || x == 0 || x == w - 1) {
					System.out.print("+");
				} else if (snake[0][0] == x && snake[0][1] == y) {
					System.out.print("g");
				} else if (check(x, y)) {
					System.out.print("#");

				} else if (checkFood(x, y)) {
					System.out.print("@");
				} else {
					System.out.print(" ");

				}
			}
			System.out.println();
		}
	}

	private boolean check(int x, int y) {// 检测蛇的点是否在这个xy坐标上
		// TODO Auto-generated method stub
		for (int i = 0; i < snake.length; i++) {
			if (snake[i][0] == x && snake[i][1] == y) {// 和面板验证
				return true;
			}

		}
		return false;
	}

	public void move() {
		if (isEat()) {
			snake = Arrays.copyOf(snake, snake.length + 1);
			snake[snake.length - 1] = new int[2];//snake 这个数组copy后(snake.length-1是数组的下表代表最后一个)最后一个为null我们个这个数组赋个2位数的组值
		}
		for (int i = snake.length - 1; i > 0; i--) {
			snake[i][0] = snake[i - 1][0];
			snake[i][1] = snake[i - 1][1];// 数组中的每个元素都向后挪一位
		}
		int x = dir % 10;// 生成蛇头 x方向移动
		int y = dir / 10;// y方向移动

		snake[0][0] += x;// 第一行第一个(元素)
		// 蛇头方向
		snake[0][1] += y;//
	}// else以上

	public void change() {// 根据wsad改变官方向dir，但不能掉头
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();// 认识回车
		if ("w".equals(str)) {
			dir = (dir != 10) ? -10 : 10;// 成立,执行前面,不成立,执行后面
		} else if ("s".equals(str)) {// 就是不让你改变
			dir = (dir != -10) ? 10 : -10;// 如果调头跑执行?面的数
		} else if ("a".equals(str)) {
			dir = (dir != 1) ? -1 : 1;
		} else if ("d".equals(str)) {
			dir = (dir != -1) ? 1 : -1;
		} else if ("q".equals(str)) {
			System.err.println("退出游戏");// 1;右，-1左，10下，-10上
			System.exit(0);
		}

	}// 1;右，-1左，10下，-10上

	public void createFood() {
		Random rd = new Random();
		for (int i = 0; i < foods.length; i++) {
			int x = rd.nextInt(38) + 1;
			int y = rd.nextInt(18) + 1;
			foods[i][0] = x;
			foods[i][1] = y;

		}
	}

	private boolean checkFood(int x, int y) {
		for (int i = 0; i < foods.length; i++) {
			if (foods[i][0] == x && foods[i][1] == y) {
				return true;
			}
		}
		return false;
	}

	private boolean isEat() {
		for (int i = 0; i < foods.length; i++) {
			if (foods[i][0] == snake[0][0] && foods[i][1] == snake[0][1]) {
				foods[i][0] = -1;
				foods[i][1] = -1;
				return true;
			}
		}
		return false;
	}
}

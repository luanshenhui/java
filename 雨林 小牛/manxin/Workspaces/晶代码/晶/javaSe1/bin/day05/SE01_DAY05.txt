迭代器
Collection中提供了一个方法
Iterator iterator()
该方法用于返回当前集合的迭代器

迭代器是用于遍历集合的。
由于每种集合的内部实现不同，迭代器遍历集合元素的方式也不尽相同，所以我们不需要记住每一种迭代器的名字。我们就统一把他们看成迭代器去使用就可以了。

Iterator接口
定义了三个方法
boolean hashNext():
询问迭代器迭代的集合是否还有元素。

Object next():
获取下一个元素

void remove:
删除刚刚迭代出来的元素。

使用迭代器的流程
问拿删。可以不删除元素。
但一定要注意，问一次拿一次！

泛型
java1.5之后支持的一个新特性
可以在我们使用某个类的时候，动态的给该类的属性或方法的参数，返回值指定类型。

public class ArrayList<E>{
   public boolean add(E e){...}

   public E get(int index){...}
}

List<String> list = new ArrayList<String>();
list.add("123");
String s =list.get(0);

当支持泛型的类我们在使用的时候不指定泛型类型时，那么泛型类型默认就是Object

java1.5后的有一个新特性
增强for循环 又叫新循环

新循环的作用是遍历集合和数组的。不能用新循环代替传统循环。

for(TYPE ele : array){
....
}
TYPE:集合或数组的元素类型
ele:元素的引用变量
array:要遍历的集合或数组的实例

新循环的循环次数有遍历的集合或数组的长度决定。每次循环时，会将集合或数组中的元素依次赋值给ele，然后进入循环体。
subList 取子集
List集合的方法subList可以获取当前集合的部分内容。
List<E> subList(int from,int to)



数据结构
队列Queue
队列是一种非常常用的数据结构，存取数据本着先进先出原则。
java中提供了Queue接口来描述队列
常用的实现类为LinkedList

boolean offer(E e)
向队列末尾追加元素，追加成功返回true

E poll():
从队首获取元素。
注意:获取后，队首元素就从队列中删除了。

E peek()
获取队首元素，但该元素不会从队列中删除。

栈结构
Deque接口
栈也可以保存一组数据，在存取方式上也有要求，本着先进后出原则。
LinkedList也是其一个实现类

push(E e):向栈顶压入新元素

E pop():返回栈顶元素，并从栈中删除。
         当栈中没有元素时，调用该方法会引         发异常

E peek():获取栈顶元素，但不删除


集合的排序
若要进行排序，就要确定元素的大小。

对象与对象间的大小关系如何确定。
java提供了一个接口Comparable
Comparable接口定义了一个抽象方法

compareTo()
该方法用于定义对象间的比较规则。
当我们定义的一个类若实现了该接口，那么就说明这个类的实例是可比较的。

当类中的比较规则不能满足我们对排序的要求时，可以使用Collections的重载sort方法。给定一个比较规则，按照我们的规则比较后进行自然排序。
Collections.sort(Collection c,Comparator cc)

Comparator接口
该接口用于定义一种比较规则。
通常Comparator不需要定义额外的子类实现，都是使用匿名类的方式创建实例。





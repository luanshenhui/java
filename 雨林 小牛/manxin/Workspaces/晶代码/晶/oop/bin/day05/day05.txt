static 静态的，可以修饰类的成员，在类体中使用
   可以修饰 属性，方法，代码块
   静态的资源都是属于类的，

   静态属性：是属于类的属性，在类加载期间初始化，并且只有一份
   如：图片素材只加载一份就够了。

  静态方法：是属于类方法，使用类名调用，经常作为工具方法、
  工厂方法，静态方法没有隐含参数this，与当前对象无关，不能访问
  当前对象（this）的方法、属性
 
 静态代码块：在类中声明，在类加载期间执行，只执行一次
 用于加载 一次的静态资源。如：图片素材   
   
final 最终的
  final class 不能被继承了
  final 方法  不能被重写
  final 变量 用的多，“final变量”只能初始化不能再修改了
  
  final int a = 5;//变量a的值不能再次修改
  //ary 是引用变量，值是地址值，通过地址间接引用了 数组
  final int[] ary = {5,6};//变量ary的值不能再改了
  ary = new int[3];//编译错误
  ary[0]+=3;

static final 常量
  定义软件中，不变化常数：CELL_SIZE=25
  命名：使用全大写的命名，多个单词下划线隔开
  
  区别：常量 与 字面量

对象数组：元素是对象的数组，实际上 元素是引用类型变量

  Cell[] cells = new Cell[4];//创建数组，但元素是null
  Cell[] line = new Cell[10];//创建数组，但元素是null
  
  cells = new Cell[]{new Cell(0,4), new Cell(0,3),
  			new Cell(0,5), new Cell(1,4)};
  			
  二维数组本质是一维数组
  
  抽象类
   业务方面：表达了抽象的概念，与具体相反
     抽象概念包含抽象行为，如：饮料一定可以打开，由具体饮料类型
     决定。
   语法方面：
   1）使用abstract 关键字定义抽象类
   2) 抽象类中可以定义 抽象的方法
   3）抽象类可以定义变量，引用子类型对象
   4）抽象类不能直接创建对象
   5）抽象类只能被继承
   6）继承抽象类，必须实现全部的抽象方法
   抽象类 
abstract： 抽象的
  1）使用 abstract 关键字声明的类。
  2）表示逻辑上的抽象概念, 如： 4格方块
  3）抽象类不能直接实例化
  4）抽象类只能被继承
  5）抽象类可以定义变量，引用具体类的实例
      抽象类的实例是多种多样的--多态现象
      如： 4格方块的具体实例是多种多样的！
  6）抽象类中可以定义抽象方法，代表必须由子类实现的抽象的功能
   抽象方法规范了子类的方法。  
     抽象方法：使用abstract关键字定义，有方法名，没有方法体
    必须由子类实现的方法。
   抽象类： TimerTask 规范了子类必须实现run() 方法。
   实现Timer API与使用者代码的约定。 
    
接口 interface
 1）是纯抽象类，接口中只能定义抽象方法，和常量
 2）子类可以实现（implements）多个接口。就是Java中多继承现象
 3）接口可以定义变量 引用子类型实例
 4）接口也用于定义软件的规约。

内部类
  1）在类内部，或者方法中定义的类
  2）使用目的，是为了封装类的定义范围，在类内部使用
  
  
  软件中类：
  1）公有类 ： 任何地方都可见
  2）默认类（同包类）：当前包中可见
  3）内部类：类内部
  4）匿名内部类：当前方法中

匿名内部类--匿名类
  1）语法简洁:  new Xoo(){}
  2) 是在方法中定义的内部类，作用域是当前方法。
  3）内部类，匿名类，都会编译为一个独立的.class
  4) 常用匿名类在方法中简洁的实现接口或者抽象类。
  5）匿名类中的方法经常被回调执行
    
    如下代码，run（）方法被定时器timer，在适当时候，执行 
   实际上是将run方法教给了Timer，由Timer在时间合适时候，
   被Timer回调执行。
  		Timer timer = new Timer();
		timer.schedule(new TimerTask(){
			public void run(){
				System.out.println("HI"); 
			}
		}, 0, 1000);








   
   

 
 
 



















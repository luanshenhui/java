1.什么是多态？
	父类的引用可以拥有多种形态---指向多种子类的对象
	
2.什么叫做抽象类，抽象类有什么用
	1.抽象类：
		a.用abstract关键字修饰的类
		b.抽象类无法实例化，无法创建对象
		c.抽象类中可以有抽象方法
			抽象方法：只有方法的修饰和方法的签名，没有方法体
			public abstract int add();
			抽象方法只能定义在抽象类中
		d.抽象类存在的意义就是被继承
		e.抽象类定义了类的规范
		f.抽象类中的抽象方法，必须被覆盖
		
3.什么叫接口？接口有什么用
  接口：
		a.用interface声明
		b.接口中所有的方法都必须是抽象方法
		c.接口中所有的成员变量都必须是常量(不能定义静态)
		d.接口存在的意义是定义某种规范，只有被实现(implements)才能使用
		e.接口被实现之后，必须覆盖所有的抽象方法
		f.同一个类可以同时实现多个接口,每个接口之间用","链接
		
4.抽象类和接口有什么区别
	接口是公开的，里面不能有私有的方法或变量，是用于让别人使用的，而抽象类是可以有私有方法或私有变量的，
	另外，实现接口一定要实现接口里定义的所有方法，而实现抽象类可以有选择的重新写需要用到的方法。一般的
	应用里，最顶级的是接口，然后是抽象类实现接口，最后才到具体类的实现。
	还有接口可以实现多重继承，而一个类只能继承一个超类，但可以通过继承多个接口实现多重继承，接口还有标识(里面没有
	任何方法，如Remote接口)和数据共享(里面的变量全是常量)的作用
	抽象类能够实现接口，但接口不能继承抽象类
	
5.什么叫线程安全，非线程安全
	线程安全：如果你的代码所在的进程中由多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行的结果和单线程的结果是一样的，
	而且其他的变量的值也和预期的是一样的，就是线程安全
	非线程安全：不提供数据访问保护，有可能初夏你多个线程先后更改数据造成所得到的数据是脏数据
	
6.线程的生命周期：是指从线程创建到运行完毕的整个过程
	1.初始化    init();
	2.可执行	 不可控   start();
	3.执行  执行run()中的代码;
	4.阻塞     sleep():占用CPU; wait():释放CPU,再次启用需要调用start();
	5.销毁    cannel();
	
7.开辟一条线程有哪几种方式
	1.实现Runnable接口的方式创建线程，
		a.覆盖run()
		b.创建实现类的对象
		c.通过Thread类启动线程
	2.通过集成Thread类的放肆创建线程
		a.覆盖run()
		b.创建子类的对象
		c.使用start()方法使用线程
	
1.final有什么用
	final关键字：
	1.final修饰的类,无法被继承。例如：String、Integer、Boolean
	2.final修饰的方法，无法被覆盖(重写)
	3.final修饰的变量，只能赋值一次
	4.final static修饰的成员变量，被称为常量
	
2.StringBuffer有什么用，跟StringBuilder有什么区别
	StringBuffer 和  StringBuilder:用来拼接字符串。
	两个伴生类，API基本一样。
	用append()方法连接字符串。
	1.前者线程安全，后者非线程安全
	2.后者效率高
	3.拼接字符串用
	4.不用考虑安全性的时候用StringBuilder
	
3.学习过哪些集合的实现类，分别有什么区别
	List---->ArrayList(基于数组)====Vector(线程安全) 集合 线性表
	有序、数据可重复
	
	Set 集合 散列表------>HashSet
	无序、数据不可重复，后放入的数据会把前一个重复的覆盖掉
	Set集合用Iterator 进行迭代
	
	Map集合的迭代----->HashMap(基于映射)=====HashTable(线程安全)
	Map集合将Key属性和Value属性再度封装成自己的内部类Entry
	entrySet方法可以返回Entry的Set集合
	
5.列出五个我们常遇到的异常
		1.NullPointException:空指针异常
		2.ArrayIndexOfBounds:数组下标越界
		3.类型转换异常ClassCastException
		4.栈溢出异常StractOverFlowError
		5.参数类型不匹配
		6.InputMismathException:输入不匹配异常
		7.类没有找到异常：ClassNotFountException
		8.文件没有找到异常：FileNotFountException
		
6.列出五个常用的工具类
  java.lang.String
  java.util.hashMap
  java.util.Arrays
  java.util.ArrayList
  Arrays Collections Scanner Random Date
  
7.new/this/super关键分别有什么作用
	super: 1.在子类中代表父类对象的引用变量，一般用于子类调用父类中与子类相同的成员变量或成员方法。限定用来调用父类被覆盖的实例方法。指代父类的同名方法
				或构造方法
	this:  1.方法中的局部变量与类的成员变量重名时，总是指向调用该方法的对象。根据this出现位置的不同，有两种情形：
			a.构造器中引用该构造器正在初始化的对象
			b.在方法中调用该方法的对象
	new:  调用构造方法，在堆中分配内存空间，创建对象
	
8.continue/break/return关键字有什么区别
	break：用于完全结束一个循环，跳出循环体。不管是哪种循环，一旦在循环中遇到break，系统将完全结束循环，开始执行循环之后的代码
	contonue: 只是忽略本次循环剩下语句，接着开始下一次循环，并不会终止循环
	return：并不是专门用于结束循环的，return的功能是结束一个方法。当一个方法执行到一个return语句，这个方法将被结束，并返回该方法声明的类型的数据
	
9.什么叫字节流？什么叫字符流？
	区别：a.字节流操作的数据单元是字节，字符流操作的数据单元是字符
		  b.字节流在操作时不会用到缓冲区(内存),是直接对文件本身进行操作的，而字符流在操作时使用到了缓冲区，通过缓冲区再操作文件
		  c.在硬盘上的所有文件都是以字节形式存在的(图片、声音、视频),而字符只在内存中才会形成
	字节流：由字节组成，是最基本的，它是按字节来处理的流(stream)，一个连续的字节队列。以字节为单位进行IO操作，最大的两个父类是InputStream
			与OutputStream
	字符流：是以字符为单位进行IO操作，最大的两个父类为Writer和Reader
	
10.I/O流的关闭按照什么顺序？为什么？
	先打开的后关闭，后打开的先关闭
	
11.学过哪几种内部类，分别有什么用
	1.成员内部类：
		直接将类定义在其他类的内部,在外部类中,内部类和普通类一样,但是在其他类中,这个内部类只能通过它的外部类来创建实例,
		内部类语法存在的意义就是为了体现更好的封装。例如：食物类，游戏类中的食物类
		
	2.静态成员内部类：
		基本功能跟成员内部类一样，同时又多了静态static的特征
		
	3.局部内部类：
		将类定义在方法的内部，局部内部类的声明周期只在方法的内部，不常用
		
	4.匿名内部类：
		创建某个类的匿名子类，一般用来创建抽象类或者接口的实例。
		当某个抽象类或接口，只需要使用一次而已，那么没有必要创建一个单独的文件，这时我们使用匿名内部类来实例化这个接口或抽象类
		匿名内部类相当于这个抽象类或接口的子类，必须覆盖其中所有的抽象方法。
		
12.异常处理有哪几种方式，如何选取
	1.捕获异常并且处理。(异常发生的源头)
			try{
				可能会出现异常的代码
			}catch{
				异常出现时，处理的方式(代码)
			}finally{
				无论是否出现异常，代码都会执行，一般用于回收系统资源
			}
		2.throw,thorws 抛出异常。
			throw:在程序代码中抛出。
			throws:在方法签名后抛出，表示该方法内出现的所有异常均不处理，全部抛给上级调用者
			
		抛出和处理本质上的区别在于程序是否继续执行
		
13.Collection和Collections有什么区别？
	1.java.util.Collection 是一个集合接口。他提供了对集合对象进行基本操作的通用接口方法。Collection接口在java类库中有很多具体的实现。Collection接口
	 的意义是为各种具体的集合提供了最大化的统一操作方式(ArrayList HashSet LinkList Vector)
	2.java.util.Collections 是一个包装类，它包含了各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于java的Collection框架
	
	

	
	
	
	
	
	
	
	
	

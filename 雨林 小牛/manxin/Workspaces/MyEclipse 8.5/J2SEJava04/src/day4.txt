一、异常和异常的处理
	1.什么是异常？
		程序运行时出现的种种问题，包括可预知的和不可预知的
		
	2.异常是如何产生的？
		1.编码时思维不够缜密
		2.Java语言的开发者抛出的异常
		3.用户的不友好
		4.系统的不稳定
		
	3.如何处理异常？
		1.捕获异常并且处理。
			try{
				可能会出现异常的代码
			}catch{
				异常出现时，处理的方式(代码)
			}finally{
				无论是否出现异常，代码都会执行，一般用于回收系统资源
			}
		2.throw,thorws 抛出异常。
			throw:在程序代码中抛出。
			throws:在方法签名后抛出，表示该方法内出现的所有异常均不处理，全部抛给上级调用者
			
		抛出和处理本质上的区别在于程序是否继续执行
		
	4.常见的异常有哪些？
		1.NullPointException:空指针异常
		2.ArrayIndexOfBounds:数组下标越界
		3.类型转换异常
		4.栈溢出异常
		5.参数类型不匹配
		6.InputMismathException:输入不匹配异常
	
二、多线程的应用
	程序:代码、指令的集合、顺序结构
	进程:进行中的程序，每个进程都会占用一块独立的内存空间，在没有允许的情况下，各个进程之间是无法通信的
	线程:一个进程内，程序运行的基本单元
	多线程:多个同时执行的顺序程序，利用CPU的轮转让程序中的多段代码“同时”执行
	
	如何在Java语言中实现多线程
	1.实现Runnable接口，覆盖run方法
	
	2.继承Thread类，覆盖run方法
	
	线程的生命周期：
	1.初始化    init();
	2.可执行	 不可控   start();
	3.执行  执行run()中的代码;
	4.阻塞     sleep():占用CPU; wait():释放CPU,再次启用需要调用start();
	5.销毁    cannel();

	线程锁：
		用来解决多线程并发访问一个数据时，造成的冲突
		
		1.方法锁/代码锁  public synchronized void run(){}
			多个线程的对象去访问一个方法，在其中一个线程对象使用完这个方法之前，其他线程的对象无法使用这个方法
			
		2.对象锁 synchronized(对象){代码}
			在代码执行完成之前，会将该对象锁住，禁止其他线程来访问
			
		3.死锁：一直占用资源不释放

	练习：
		1.在图形界面中画一个小球
		2.让小球在页面中从上向下移动
		3.如果鼠标点到小球，则小球从新的位置落下来
		4.如果小球落到地上，则抛出异常("游戏结束")


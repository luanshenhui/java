package com.dpn.ciqqlc.http;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dpn.ciqqlc.common.util.CommonUtil;
import com.dpn.ciqqlc.common.util.Constants;
import com.dpn.ciqqlc.common.util.FileUtil;
import com.dpn.ciqqlc.http.form.PunishForm;
import com.dpn.ciqqlc.service.LocalePunishDB;
import com.dpn.ciqqlc.standard.model.CodeLibraryDTO;
import com.dpn.ciqqlc.standard.model.DocTypeDTO;
import com.dpn.ciqqlc.standard.model.LocalePunishDTO;
import com.dpn.ciqqlc.standard.model.UserInfoDTO;
import com.dpn.ciqqlc.standard.model.VideoDTO;

/*********************************************************************************************************************
 * 简易处罚
 *********************************************************************************************************************/
@Controller
@RequestMapping(value = "/punish")
public class LocalePunishController {

	/**
	 * logger.
	 * 
	 * @since 1.0.0
	 */
	private final Logger logger_ = LoggerFactory.getLogger(this.getClass());

	/**
	 * DbServ.
	 * 
	 * @since 1.0.0
	 */
	@Autowired
	@Qualifier("localePunishDBServ")
	private LocalePunishDB localePunishDBServ = null;

	/*********************************************************************************************************************
	 * 页面跳转简易处罚详情页面
	 * 
	 * @return
	 *********************************************************************************************************************/
	@RequestMapping("/localepunishinfojsp")
	public String LocalePunishInfoJSP() {
		return "punish/localepunishinfo";
	}

	/**
	 * 处罚决定书页面
	 * 
	 * @return
	 */
	@RequestMapping("/searchDetail")
	public String searchDetail(HttpServletRequest request, HttpSession session,
			String punishId) {
		// TODO 查看处罚决定书所有东西
		try {
			Map<String, String> result = localePunishDBServ.searchDetail(punishId);
			request.setAttribute("result", result);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "template/dangchangxingzhengchufapanjueshu";
	}

	/*********************************************************************************************************************
	 * 简易处罚列表
	 * 
	 * @param request
	 * @return
	 *********************************************************************************************************************/
	@RequestMapping("/localepunishes")
	public String localePunishes(HttpServletRequest request,
			HttpSession session, PunishForm punishForm) {
		UserInfoDTO user = (UserInfoDTO) session
				.getAttribute(Constants.USER_KEY);
		Map<String, String> map = new HashMap<String, String>();

		try {
			int pages = 1;
			if (request.getParameter("page") != null
					&& !"".equals(request.getParameter("page"))) {
				pages = Integer
						.parseInt(request.getParameter("page") == null ? "1"
								: request.getParameter("page"));
			}
			List<CodeLibraryDTO> organizes = CommonUtil.queryCodeLibrary(
					Constants.QLCORGANIZES, request); // 直属局下拉列表
			List<CodeLibraryDTO> deptments = CommonUtil.queryCodeLibrary(
					Constants.QLCDEPTMENTS, request); // 分支机构下拉列表
			if (user.getManage_sign().equals("Y")) { // 系统管理员
				organizes.add(0, new CodeLibraryDTO());
				deptments.add(0, new CodeLibraryDTO());
			} else if (CommonUtil.OrganizesContains(organizes,
					user.getOrg_code())) { // 直属局人员
				for (int i = organizes.size() - 1; i >= 0; i--) {
					if (!(organizes.get(i).getCode().equals(user.getOrg_code()))) {
						organizes.remove(i);
					}
				}
				punishForm.setPort_org_code(user.getOrg_code());
				deptments.add(0, new CodeLibraryDTO());
			} else { // 分支机构人员
				for (int i = deptments.size() - 1; i >= 0; i--) {
					if (!(deptments.get(i).getCode().equals(user.getOrg_code()))) {
						deptments.remove(i);
					}
				}
				punishForm.setPort_org_code("CIQGVLN"); // 此处code应为该登陆人所属分支机构的上级的直属局code（因数据库没有逻辑关系或者数据补全，目前写死）
				punishForm.setPort_org_code(user.getOrg_code());
			}
			map.put("start_date", punishForm.getStart_date());
			map.put("end_date", punishForm.getEnd_date());
			map.put("party_name", punishForm.getParty_name());
			map.put("illegal_content", punishForm.getIllegal_content());
			map.put("punish_style", punishForm.getPunish_style());
			map.put("port_org_code", punishForm.getPort_org_code());
			map.put("port_dept_code", punishForm.getPort_dept_code());
			map.put("firstRcd",
					String.valueOf((pages - 1) * Constants.PAGE_NUM + 1)); // 数据定位
			map.put("lastRcd", String.valueOf(pages * Constants.PAGE_NUM + 1));

			int counts = localePunishDBServ.findLocalePunishesCount(map); // 查询数据总条数
			List<LocalePunishDTO> results = localePunishDBServ
					.findLocalePunishes(map); // 查询列表信息

			request.setAttribute("map", map); // 查询条件回显
			request.setAttribute("results", results);
			request.setAttribute("counts", counts); // 总条数
			request.setAttribute("itemInPage", Constants.PAGE_NUM); // 每页显示条数
			request.setAttribute("pages", pages); // 当前页面
			request.setAttribute("organizes", organizes);
			request.setAttribute("deptments", deptments);
		} catch (Exception e) {
			logger_.error("***********/punish/localepunishes************", e);
		}
		return "punish/localepunishes";
	}

	@ResponseBody
	@RequestMapping("/localepunishinfo")
	public Map<String, Object> localepunishInfo(String punish_id) {
		Map<String, Object> resultData = new HashMap<String, Object>();
		try {
			if (null == punish_id || "".equals(punish_id)) {
				resultData.put("status", "FAIL");
				resultData.put("results", "输入数据不能为空");
			} else {
				Map<String, String> filesParameter = new HashMap<String, String>(); // 存放照片，视频和doc的查询参数
				filesParameter.put("punish_id", punish_id); // 查询条件之业务ID
				filesParameter.put("proj_code", "CF_J_Y"); // 查询条件之系统id
				filesParameter.put("port_org_code", ""); // 查询条件之直属局
				filesParameter.put("port_dept_code", ""); // 查询条件之分支机构
				LocalePunishDTO results = localePunishDBServ
						.localepunishInfo(filesParameter); // 获得进出境运输工具检疫（货轮）基本信息
				List<VideoDTO> localePunishFiles = localePunishDBServ
						.queryPunishFiles(filesParameter); // 查询该详情页面所涉及的所有照片和视频
				List<DocTypeDTO> localePunishDocs = localePunishDBServ
						.queryPunishDocs(filesParameter); // 查询该详情页面所涉及的所有doc
				resultData.put("status", "OK");
				resultData.put("results", results);
				resultData.put("localePunishFiles", localePunishFiles);
				resultData.put("localePunishDocs", localePunishDocs);
			}
		} catch (Exception e) {
			logger_.error("***********/punish/localepunishinfo************", e);
		}
		return resultData;
	}

	@RequestMapping("/uploadvideo")
	public String uploadVideo(HttpServletRequest request) throws Exception {
		String proc_main_id = request.getParameter("punish_id");
		String proc_type = request.getParameter("proc_type");
		List<Map<String, String>> video_names = FileUtil.uploadFile(request,
				false);

		try {
			if (proc_main_id != null && proc_type != null
					&& video_names.size() != 0) {
				String file_name = video_names.get(0).get("fileName");
				Map<String, String> map = new HashMap<String, String>();
				map.put("proc_main_id", proc_main_id);
				map.put("proc_type", proc_type);
				map.put("file_type", "2");
				map.put("file_name", file_name);
				map.put("create_user", ((UserInfoDTO) request.getSession()
						.getAttribute(Constants.USER_KEY)).getId());
				localePunishDBServ.insertPunishFiles(map);
			}
		} catch (Exception e) {
			logger_.error("***********/punish/uploadvideo************", e);
		}
		return "redirect:/punish/localepunishinfojsp?punish_id=" + proc_main_id;
	}
}
